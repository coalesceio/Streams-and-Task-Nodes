defaultStorageMapping: TARGET_DB
installedPackages: {}
jobs: {}
locations: {}
macros:
  Macro-1:
    id: "1"
    macroString: |-
      {#-- The below block of code initialises variables in case of node typess using advance deployment strategy #}
      
      {% if desiredState %}
          {% set columns = desiredState.columns %}
          {% set storageLocations = desiredState.storageLocations %}
          {% set config = desiredState.config %}
          {% set sources = desiredState.sources %}
          {% set node = desiredState.node %}
          {% set parameters = desiredState.parameters %}
      {% endif %}
      
      
      {#-- This macro will frame the order by clause with the columns and sort order specified in config #}
      {#-- Input parmeters   - None #}
      {#-- Return            - Order by clause #}
      
      {%- macro sortorder_by_colv(return) -%}
          {%- set nsVariables = namespace(sortcolNames="") -%}
          {%if config.orderby %}
              {%- for i in config.orderbycolumn.get('items') -%}
                  {%- set colName = i.sortColName.name -%}
                  {%- set colOrder = i.sortOrder -%}
      	        {%- if loop.first -%}	      
      		        {%- set nsVariables.sortcolNames = '"' + colName + '"' + colOrder -%}	  
      	        {%- else -%}      
      		        {%- set nsVariables.sortcolNames = nsVariables.sortcolNames + ',' + '"' + colName + '"' + colOrder-%}	  
      	        {%- endif -%}
              {%- endfor -%}	
                  {%- set nsVariables.sortcolNames = 'order by' + nsVariables.sortcolNames -%}
       
          {% endif %} 
          
          {{- nsVariables.sortcolNames -}}
       
      {%- endmacro -%}
      
      
      
      {#-- This macro will split the join clause into from and rest of the clauses like where,groupby,orderby ,qualify  #}
      {#-- Input parmeters   - joinclause #}
      {#-- Return            - from clause and other clauses #}
      
      
      {%- macro get_clause( joinclause , ret_clause ) -%}
      
                  {% set join_clause = joinclause %}
                  {% set has_where_clause = 'where'in join_clause %}
                  {% set has_WHERE_clause = 'WHERE'in join_clause %}
                  {% set has_order_clause = 'order by'in join_clause %}
                  {% set has_ORDER_clause = 'ORDER BY'in join_clause %}
                  {% set has_group_clause =  'group by'in join_clause %}
                  {% set has_GROUP_clause = 'GROUP BY'in join_clause %}
                  {% set has_qualify_clause =  'qualify'in join_clause %}
                  {% set has_QUALIFY_clause = 'QUALIFY'in join_clause %}
      
                 
      
                  {% set clause='default' %}
      
                  {% if has_where_clause %}
      
                      {% set keyword='where'%} 
                      {% set clause='where_clause' %}
        
                  {% elif  has_WHERE_clause %}
      
                       {% set keyword='WHERE'%}
                       {% set clause='where_clause' %}
                  {% endif %}
      
                  {% if has_group_clause and clause != 'where_clause'  %}
      
                       {% set keyword='group by'%}
                       {% set clause='group_clause' %}
                  
                  {% elif  has_GROUP_clause and clause != 'where_clause' %}
      
                       {% set keyword='GROUP BY'%}
                       {% set clause='group_clause' %}
      
                  {% endif %}
      			
                  {% if has_qualify_clause and clause != 'where_clause' and clause != 'group_clause'  %}
      
                       {% set keyword='qualify'%}
                       {% set clause='qualify_clause' %}
                  
                  {% elif  has_QUALIFY_clause and clause != 'where_clause' and clause != 'group_clause'  %}
      
                       {% set keyword='QUALIFY'%}
                       {% set clause='qualify_clause' %}
      
                  {% endif %}            
      
      			{% if has_order_clause and  clause != 'where_clause' and clause != 'group_clause' and clause != 'qualify_clause' %}
      
                       {% set keyword='order by'%}
                       {% set clause='order_clause' %}
                  
                  {% elif has_ORDER_clause and clause != 'where_clause' and clause != 'group_clause' and clause != 'qualify_clause' %}
      
                       {% set keyword='ORDER BY'%}
                       {% set clause='order_clause' %}
      
                  {% endif %}
      
      
      
                  {% if clause == 'where_clause' %}
                     {% set parts = join_clause.split(keyword) %}
                     {% set from_clause = parts[0] %}
                     {% set add_clause = 'AND' + join_clause.split(keyword)[1] %}
      
                  {% elif clause == 'group_clause' %}
      
                     {% set parts = join_clause.split(keyword) %}
                     {% set from_clause = parts[0] %}
                     {% set add_clause = 'group by' + join_clause.split(keyword)[1] %}
      
                  
                  {% elif clause == 'qualify_clause' %}
      
                     {% set parts = join_clause.split(keyword) %}
                     {% set from_clause = parts[0] %}
                     {% set add_clause = 'qualify' + join_clause.split(keyword)[1] %}
      
      
                  {% elif clause == 'order_clause' %}
      
                     {% set parts = join_clause.split(keyword) %}
                     {% set from_clause = parts[0] %}
                     {% set add_clause =  'order by' + join_clause.split(keyword)[1] %}
                     
      
                  {% else %}
      
                     {% set from_clause = join_clause %}
                     {% set add_clause = '' %}
      
                  {% endif %}
      			
      			{% if ret_clause == 'from' %}
      			   {{ from_clause }}
      			{% else %}
      			   {{ add_clause }}
      			{% endif %}
      			
      			
      {%- endmacro -%}
packages: {}
projects: {}
stepTypes:
  StepType-149:
    id: "149"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: DIMENSION WITH TASK
        short: TSKDIM
        tagColor: '#1E339A'
        plural: Dimensions

        deployStrategy: advanced

        config:
        - groupName: Options
          items:
          - displayName: Development Mode
            attributeName: devMode
            type: toggleButton
            isRequired: true
            default: true

          - type: multisourceToggle

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
            
          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          # Cluster Key-determines if a node is to be clustered or not #

          - type: toggleButton
            attributeName: clusterKey
            displayName: Cluster Key
            default: false
            isRequired: true

          - type: toggleButton
            attributeName: clusterKeyExpressions
            displayName: Allow Expressions in Cluster Key
            default: false
            isRequired: true
            enableIf: "{% if config.clusterKey %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfig
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnName
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and not config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfigExpressions
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnNameExpressions
               isRequired: false
          
            -  type: textBox
               displayName: Expression
               attributeName: sqlExpression
               default: "ex. trunc(<column_name>, -5)"
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and config.clusterKeyExpressions) %} true {% else %} false {% endif %}"
            
        - groupName: General Options
          items: 
            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct
              default: false
              enableIf: "{% if config.groupByAll %} false {% else %} true {% endif %}"

            - type: toggleButton
              attributeName: groupByAll
              displayName: Group By All
              enableIf: "{% if config.selectDistinct %} false {% else %} true {% endif %}"
              default: false

            - displayName: Order By
              attributeName: orderby
              type: toggleButton
              default: false
              enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

            - type: tabular
              displayName: 'Sort column'
              attributeName: orderbycolumn
              columns:

              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: sortColName

              -  type: dropdownSelector
                 displayName: Sort Order
                 attributeName: sortOrder
                 default: desc
                 options:
                 - desc
                 - asc
               
              isRequired: true
              enableIf: "{% if config.orderby %} true {% else %} false {% endif %}"
              

        - groupName: Scheduling Options

          # Schedule mode-specifies whether a warehouse or serverless compute is used to run the task #

          enableIf: "{% if config.devMode == true %} false {% else %} true {% endif %}" 
          items:
          - displayName: Scheduling Options
            attributeName: schedulingMode
            type: dropdownSelector
            default: Warehouse Task
            options:
              - Warehouse Task
              - Serverless Task
            isRequired: true

          # Checks whether source streams have data before executing a task #

          - displayName: When Source Stream has Data Flag
            attributeName: flagSrcStream
            type: toggleButton
            isRequired: true

          - displayName: Multiple Stream has Data Logic
            attributeName: multiStreamBehavior
            type: dropdownSelector
            default: AND
            options:
              - AND
              - OR
            isRequired: true
            enableIf: "{% if config.flagSrcStream == true %} true {% else %} false {% endif %}"

          # Warehouse name  you want the task to run #

          - displayName: Select Warehouse on which to run task
            attributeName: whName
            type: textBox
            default: '<WAREHOUSE_NAME>'
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Warehouse Task' %} true {% else %} false {% endif %}"

          - displayName: Select initial serverless Warehouse size
            attributeName: serverlessSize
            type: dropdownSelector
            default: 'MEDIUM'
            options:
              - XSMALL
              - SMALL
              - MEDIUM
              - LARGE
              - XLARGE
              - XXLARGE
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Serverless Task' %} true {% else %} false {% endif %}"

          # Way to schedule the task to run #

          - displayName: Task Schedule
            attributeName: schedulePeriodOption
            type: dropdownSelector
            default: Predecessor
            options:
              - Minutes
              - CRON
              - Predecessor
            isRequired: TRUE

          - displayName: Enter task schedule using minutes
            attributeName: schedulePeriod
            type: textBox
            default: '60'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Minutes' %} true {% else %} false {% endif %}"

          - displayName: Enter task schedule using CRON
            attributeName: scheduleCRON
            type: textBox
            default: '5 0-23 * * * America/Los_Angeles'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'CRON' %} true {% else %} false {% endif %}"

          - displayName: Enter predecessor task(s) seperated by a comma 
            attributeName: predTask
            type: textBox
            default: '"DATA_TRANSFORMATION_ROOT_TASK"'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

          - displayName: Enter root task name
            attributeName: rootTask
            type: textBox
            default: '"DATA_TRANSFORMATION_ROOT_TASK"'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

        - groupName: Hidden Config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: task
            options:
            - task
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Dimension With Task == #}
            {# == Node Type Description    : This node creates a dimension table and a task to merge data into dimension table == #}

            {# Create / Alter Table first #}
            {% if desiredState == currentState %}

                {{ stage('No table edits.') }}
                select 1 = 0

            {% elif desiredState %}

                {% set targetTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

                {# Test if Business Key changed #}
                {% set nsVariables = namespace(businessKeyChanges=0) %}
                {% if currentState != undefined %}
                    {% for businessKeyCol in currentState.columns if nsVariables.colchanges == 0 %}        
                        {% if businessKeyCol.id in desiredState.columns | map(attribute="id") %}
                            {% set currentBusinessKeyCol = businessKeyCol.isBusinessKey %}

                            {% set desiredBusinessKeyCol = desiredState.columns | selectattr('id', "equalto", businessKeyCol.id) | map(attribute='isBusinessKey') | first %}

                            {% if currentBusinessKeyCol != desiredBusinessKeyCol %}
                                {% set nsVariables.businessKeyChanges = 1 %}
                            {% endif %}
                        {% endif %}
                    {% endfor %}

                    {% for businessKeyCol in desiredState.columns if nsVariables.businessKeyChanges == 0 %}        
                        {% if businessKeyCol.id in currentState.columns | map(attribute="id") %}
                            {% set desiredBusinessKeyCol = businessKeyCol.isBusinessKey %}

                            {% set currentBusinessKeyCol = currentState.columns | selectattr('id', "equalto", businessKeyCol.id) | map(attribute='isBusinessKey') | first %}

                            {% if currentBusinessKeyCol != desiredBusinessKeyCol %}
                                {% set nsVariables.businessKeyChanges = 1 %}
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                {% endif %}

                {# Figure out cluster key #}
                {% set nsVariables = namespace(finalClusterKey="") %}
                {% if desiredState.config.clusterKey == true %}
                    {% if desiredState.config.clusterKeyExpressions == true %}
                        {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                        {%- set nsVariables = namespace(clusterValues=[]) %}

                        {% for r in column %}
                            {% if expression[loop.index0] == "" %}
                                {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                            {% else %}
                                {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                            {% endif %}
                        {% endfor %}

                        {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                    {% else %}

                        {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                        {%- set nsVariables = namespace(clusterValues=[]) %}

                        {% for r in column %}
                            {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                        {% endfor %}

                        {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                    {% endif %}
                {% endif %}

                {% if currentState == undefined or nsVariables.colchanges == 1 %}
                    {{ stage('Create Dimension Table', true, "sql", "create") }}
                    CREATE OR REPLACE TABLE {{ fullyQualifiedTargetTableName }}
                    (
                        {% for col in desiredState.columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {% if col.isSurrogateKey %}
                                identity
                            {% endif %}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}

                    {% if desiredState.config.clusterKey == true %}
                        {{ stage('Apply Table Clustering', true, "sql", "create") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} {{ nsVariables.finalClusterKey }}

                        {{ stage('Resume Recluster Table', true, "sql", "create") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} RESUME RECLUSTER
                    {% endif %}

                {% elif currentState != undefined %}

                    {# Change Node Name or Change Storage Location #}
                    {# Storage Location Tests #}
                    {# Only need to account for updated Storage Location mappings   #}
                    {# Current Namespace Varialbes #}
                    {% set nsVariables = namespace(nsCurrentDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentUsedStorageLocations="") %}

                    {# Current State Storage Location Info #}
                    {% for source in currentState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsCurrentDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nsCurrentDepStorageLocations = nsVariables.nsCurrentDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsCurrentTargetStorageLocations = currentState.node.location.name  %}

                    {% set nsVariables.nsCurrentUsedStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentTargetStorageLocations %}

                    {% set currentStorageLocations = (nsVariables.nsCurrentUsedStorageLocations).split(',') | list %}
                    {% set currentUniqueStorageLocations = currentStorageLocations | unique | sort | list %}

                    {# Desired Namespace Variables #}
                    {% set nsVariables = namespace(nsDesiredDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredUsedStorageLocations="") %}

                    {% set nsVariables = namespace(storageLocationTest="") %}

                    {# Desired State Storage Location Info #}
                    {% for source in desiredState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nnsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

                    {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

                    {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
                    {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}

                    {# Test  #}
                    {% set nsVariables.storageLocationTest = true %}
                    {% set nodeCommentTest = currentState.node.description == desiredState.node.description %}

                    {% for name in desiredUniqueStorageLocations if nsVariables.storageLocationTest == true %}
                        {# Current mappings #}
                        {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                        
                        {# Desired mappings #}
                        {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                        {% if currentDatabaseSchema != desiredDatabaseSchema %}
                            {% set nsVariables.storageLocationTest = false %}
                        {% endif %}
                    {% endfor %}

                    {# Clustering Test #}
                    {% set clusterKeyTest = currentState.config.clusterKey == desiredState.config.clusterKey %}
                    {% set clusterKeyExpressionsTest = currentState.config.clusterKeyExpressions == desiredState.config.clusterKeyExpressions %}
                    {% set clusterKeyConfigTest = currentState.config.clusterKeyConfig == desiredState.config.clusterKeyConfig %}
                    {% set clusterKeyConfigExpressionsTest = currentState.config.clusterKeyConfigExpressions == desiredState.config.clusterKeyConfigExpressions %}

                    {% if 
                        clusterKeyTest == false or
                        clusterKeyExpressionsTest == false or
                        clusterKeyConfigTest == false or
                        clusterKeyConfigExpressionsTest == false %}

                        {% set clusterTest = false %}
                    {% else %}
                        {% set clusterTest = true %}
                    {% endif %}

                    {# Rename / Move Object #}
                    {% if (nsVariables.storageLocationTest == false or currentState.node.name != desiredState.node.name) %}
                        {{ stage('Rename and / or Move Table', true, "sql", "alter") }}
                        ALTER TABLE {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                        RENAME TO   {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                    {% endif %}

                    {# Change table description #}
                    {% if (nsVariables.nodeCommentTest == false or currentState.node.description != desiredState.node.description) %}
                        {{ stage('Change table description', true, "sql", "alter") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        SET COMMENT = '{{ desiredState.node.description | escape }}'
                    {% endif %}

                    {# Drop Columns #}
                    {% set nsVariables = namespace(colchanges=0) %}
                    {% for dropCurCol in currentState.columns %}
                        {% if dropCurCol.id not in desiredState.columns | map(attribute="id") %}
                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                            {% if nsVariables.colchanges == 1 %}
                                {{ stage('Drop Columns', true, "sql", "alter") }}
                                ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                DROP COLUMN 
                            {% else %}
                                , 
                            {% endif %}
                            "{{ dropCurCol.name }}"
                        {% endif %}
                    {% endfor %}

                    {# Add Columns #}
                    {% set nsVariables = namespace(colchanges=0) %}
                    {% for addDesCol in desiredState.columns %}
                        {% if addDesCol.id not in currentState.columns | map(attribute="id") %}
                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                            {% if nsVariables.colchanges == 1 %}
                                {{ stage('Add Columns', true, "sql", "alter") }}
                                ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                ADD COLUMN
                            {% else %}
                                ,
                            {% endif %}
                                "{{ addDesCol.name }}" {{ addDesCol.dataType }}
                                {%- if not addDesCol.nullable %} NOT NULL
                                    {%- if addDesCol.defaultValue | length > 0 %} DEFAULT {{ addDesCol.defaultValue }}{% endif %}
                                {% endif %}
                                {%- if addDesCol.description | length > 0 %} COMMENT '{{ addDescol.description | escape }}'{% endif %}
                        {% endif %}
                    {% endfor %}

                    {# Rename Columns #}
                    {% for renameCurCol in currentState.columns %}
                        {% if renameCurCol.id in desiredState.columns | map(attribute="id") %}
                            {% set desiredColumnName = desiredState.columns | selectattr('id', 'equalto', renameCurCol.id) | map(attribute='name') | first %}
                            {% if renameCurCol.name != desiredColumnName %}
                                {{ stage('Rename Column ' + renameCurCol.name, true, "sql", "alter") }}
                                ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                RENAME COLUMN "{{ renameCurCol.name }}"
                                TO "{{ desiredColumnName }}"
                            {% endif %}
                        {% endif %}
                    {% endfor %}

                    {# Change data types or other column level chnages #}
                    {% set nsVariables.colchanges = 0 %}
                    {% for alterCurCol in currentState.columns %}        
                        {% if alterCurCol.id in desiredState.columns | map(attribute="id") %}
                            {% set currentDatatype = alterCurCol.dataType %}
                            {% set currentNullable = alterCurCol.nullable %}
                            {% set currentDefaultValue = alterCurCol.defaultValue %}
                            {% set currentDescription = alterCurCol.description %}

                            {% set desiredColumnName = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='name') | first %}
                            {% set desiredDatatype = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='dataType') | first %}
                            {% set desiredNullable = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='nullable') | first %}
                            {% set desiredDefaultValue = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='defaultValue') | first %}
                            {% set desiredDescription = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='description') | first %}

                            {% set datatypeTest = currentDatatype == desiredDatatype %}
                            {% set nullableTest = currentNullable == desiredNullable %}
                            {% set defaultValueTest = currentDefaultValue == desiredDefaultValue %}
                            {% set descriptionTest = currentDescription == desiredDescription %}

                            {% if (datatypeTest == false or 
                                    nullableTest == false  or
                                    defaultValueTest == false or
                                    descriptionTest == false) %}
                                {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                {% if nsVariables.colchanges == 1 %}
                                    {{ stage('Change Column Attributes', true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    MODIFY
                                {% endif %}
                                {% if datatypeTest == false %}
                                    {% if nsVariables.colchanges > 1 %},{% endif %}
                                    COLUMN "{{ desiredColumnName }}"
                                    SET DATA TYPE {{ desiredDatatype }}
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                {% endif %}
                                {% if nullableTest == false %}
                                    {% if nsVariables.colchanges > 1 %},{% endif %}
                                    COLUMN "{{ desiredColumnName }}"
                                    {% if currentNullable == true %}
                                        SET
                                    {% else %}
                                        DROP
                                    {% endif %}
                                    NOT NULL
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                {% endif %}
                                {% if descriptionTest == false %}
                                    {% if nsVariables.colchanges > 1 %},{% endif %}
                                    COLUMN "{{ desiredColumnName }}"
                                    COMMENT '{{ desiredDescription }}'
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                {% endif %}
                                {% if defaultValueTest == false %}
                                    {% if nsVariables.colchanges > 1 %},{% endif %}
                                    COLUMN "{{ desiredColumnName }}"
                                    {% if desiredDefaultValue == '' %}
                                        DROP DEFAULT
                                    {% else %}
                                        SET DEFAULT {{ desiredDefaultValue }}
                                    {% endif %}
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                {% endif %}
                                
                            {% else %}
                                                    
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                    
                    {# Figure out cluster key #}
                    {% set nsVariables = namespace(finalClusterKey="") %}
                    {% if clusterTest == false %}
                        {% if desiredState.config.clusterKeyExpressions == true %}
                            {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% if expression[loop.index0] == "" %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% else %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                {% endif %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% elif desiredState.config.clusterKey == true %}

                            {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}
                        
                        {% else %}

                            {% set nsVariables.finalClusterKey = 'DROP CLUSTERING KEY' %}

                        {% endif %}

                        {{ stage('Recluster TABLE', true, "sql", "create") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        {{ nsVariables.finalClusterKey }}

                    {% endif %}

                {% endif %}

            {% elif currentState != undefined and desiredState == undefined %}

                {# Table or View Name #}
                {% set targetObjectDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetObjectSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetObjectName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {{ stage('Drop Table', true, "sql", "drop") }}
                DROP {{ currentState.node.materializationType }} IF EXISTS {{ fullyQualifiedTargetObjectName }}

            {%- else -%}

            {{ stage('No table edits.  Unknown state.') }}
            select 1 = 0

            {% endif %}

            {# Create Task Second #}
            {% if desiredState == currentState %}

                {{ stage('No task edits.') }}
                select 1 = 0

            {% elif desiredState %}

                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}


                {% if desiredState.config.devMode == false %}
                    {%- if desiredState.config.schedulePeriodOption == 'Predecessor' -%} 
                        {%- set fullyQualifiedRootTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + desiredState.config.rootTask + '"' -%} 
                        {{ stage('Suspend Root Task', true, "sql", "alter") }}
                        ALTER TASK {{ fullyQualifiedRootTaskName }} SUSPEND
                    {%- endif -%}

                    {{ stage('Create Task', true, "sql", "alter") }}
                    {# Set Namespace Variables #}
                    {% set nsVariables = namespace(taskWhenRun="") %}
                    {% set nsVariables = namespace(poll="WHEN ") %}

                    {# Task Info #}
                    {% set taskName = desiredState.node.name + '_TASK'  %}
                    {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 

                    {# Task Type #}
                    {%- if desiredState.config.schedulingMode == 'Warehouse Task' -%} 
                        {# Can be updated during deployment via a parameter to account for different warehouse names in different deployments #}
                        {% if desiredState.parameters.targetTaskWarehouse == 'DEV ENVIRONMENT' %}
                            {% set taskType = 'WAREHOUSE = ' + desiredState.config.whName %}
                        {% else %}
                            {% set taskType = 'WAREHOUSE = ' + desiredState.parameters.targetTaskWarehouse %}
                        {% endif %}
                    {%- else -%}
                        {%- set taskType = 'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = ' + desiredState.config.serverlessSize -%} 
                    {%- endif -%}

                    {# Schedule Type #}
                    {%- if desiredState.config.schedulePeriodOption == 'Minutes' -%} 
                        {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + desiredState.config.schedulePeriod + ' MINUTE' + "'" -%} 
                    {% elif desiredState.config.schedulePeriodOption == 'CRON' %}
                        {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + 'USING CRON ' + desiredState.config.scheduleCRON + "'" %}
                    {%- else -%}
                        {%- set nsVariables.taskWhenRun = 'AFTER ' -%}
                        {%- set predecessorTasks = (desiredState.config.predTask).split(",") -%}

                        {%- for p in predecessorTasks -%}
                            {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + targetTableDatabase + '.' + targetTableSchema + '.' + p -%}
                            {%- if not loop.last -%} 
                                {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + ',' -%}
                            {%- endif %}
                        {% endfor %}    
                    {%- endif -%}

                    {# When Stream has data logic #}
                    {# Source Stream Location and Name #}
                    {% if desiredState.config.flagSrcStream == true %}
                        {% for source in desiredState.sources %}
                            {% for dep in source.dependencies %}
                                {% if (dep.node.materializationType == 'stream') %}
                                    {% set streamStorageLocation = dep.node.location.name %}
                                    {% set streamSourceDatabase = desiredState.storageLocations | selectattr('name', 'equalto', streamStorageLocation) | map(attribute='database') | first %}
                                    {% set streamSourceSchema = desiredState.storageLocations | selectattr('name', 'equalto', streamStorageLocation) | map(attribute='schema') | first %}
                                    {% set streamSourceName = dep.node.name %}

                                    {%- if nsVariables.poll == 'WHEN ' -%}
                                        {% set nsVariables.poll = nsVariables.poll + 'SYSTEM$STREAM_HAS_DATA(\'"' + streamSourceDatabase + '"."'  + streamSourceSchema + '"."' + streamSourceName + '"\')'  %}
                                    {% else %}
                                        {% set nsVariables.poll = nsVariables.poll + desiredState.config.multiStreamBehavior + ' SYSTEM$STREAM_HAS_DATA(\'"' + streamSourceDatabase + '"."'  + streamSourceSchema + '"."' + streamSourceName + '"\')'  %}
                                    {%- endif -%}
                                {%- endif -%}
                            {% endfor %}
                        {% endfor %}
                    {% endif -%}

                    {# To mimic truncate behavior #}
                    {% if desiredState.config.truncateBefore == true %}
                        {% set truncateBehavior = 'INSERT OVERWRITE' %}
                    {% else %}
                        {% set truncateBehavior = 'INSERT' %}
                    {% endif -%}

                    CREATE OR REPLACE TASK 
                        {{ fullyQualifiedTaskName }} 
                        {{ taskType}} 
                        {{ nsVariables.taskWhenRun }} 
                        {% if nsVariables.poll != 'WHEN ' %} {{ nsVariables.poll }} {% endif %}
                    AS 
                    {% set is_type_2 = desiredState.columns | selectattr("isChangeTracking") | list | length > 0 %}

                    {% if is_type_2 %}
                        
                        

                        /* Type 2 With Change Tracking */
                        MERGE INTO {{ fullyQualifiedTargetTableName }} "TGT"
                        USING (
                        {% for source in desiredState.sources %}

                            
                            
                            /* New Rows That Don't Exist */
                            {% if loop.first %}
                            (SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                            {% for col in desiredState.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                    1
                                {% elif col.isSystemCurrentFlag %}
                                    'Y'
                                {% else %}
                                "RI"."{{ col.name }}"
                                {% endif %}
                                AS "{{ col.name }}",
                            {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                            FROM (
                            {% endif %}
                            SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                    1
                                {% elif col.isSystemCurrentFlag %}
                                    'Y'
                                {% else %}
                                {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"{% if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{  source.join  }}
                            {% if not loop.last %}
                                {{ desiredState.config.insertStrategy }}
                            {% endif %}
                            {% if loop.last %}
                                ) "RI"
                            {% endif %}
                        {% endfor %}
                            LEFT JOIN {{ fullyQualifiedTargetTableName }} "DIM" ON
                            {% for col in desiredState.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                    "RI"."{{ col.name }}" = "DIM"."{{ col.name }}"
                            {% endfor %}
                            WHERE
                            {% for col in desiredState.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "DIM"."{{ col.name }}" IS NULL
                            {% endfor %}
                            
                            {% if desiredState.config.groupByAll %}GROUP BY ALL{% endif %}
                            {{ sortorder_by_colv() }})

                            UNION ALL
                            /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        {% for source in desiredState.sources %}

                           
                            {% if loop.first %}
                           ( SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                            {% for col in desiredState.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                    "DIM"."{{ col.name }}" + 1
                                {% elif col.isSystemCurrentFlag %}
                                    'Y'
                                {% else %}
                                "RIC"."{{ col.name }}"
                                {% endif %}
                                AS "{{ col.name }}",
                            {% endfor %}
                                'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                            FROM (
                            {% endif %}
                             SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                            {% for col in source.columns if not (col.isSurrogateKey) -%}
                                {{ get_source_transform(col) }} AS "{{ col.name }}"{% if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join  }}
                            {% if not loop.last %}
                                {{ desiredState.config.insertStrategy }}
                            {% endif %}
                            {% if loop.last %}
                                ) "RIC"
                            {% endif %}
                            {% endfor %}
                            INNER JOIN {{ fullyQualifiedTargetTableName }} "DIM" ON
                            {% for col in desiredState.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                    "RIC"."{{ col.name }}" = "DIM"."{{ col.name }}"
                            {% endfor %}
                            WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                            {% for col in desiredState.columns if (col.isChangeTracking == true) %}
                                {% if loop.first %}
                                    AND (
                                {% else %}
                                    OR
                                {% endif %}
                                ( NVL( CAST("RIC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                          
                            {% if desiredState.config.groupByAll %}GROUP BY ALL{% endif %}
                                        {{ sortorder_by_colv() }}  )

                            UNION ALL
                            /* Rows Needing To Be Expired Due To Type-2 Column Changes
                            In this case, only two columns are merged (version and end date) */
                        {% for source in desiredState.sources %}
                           
                           

                            {% if loop.first %}
                            (SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemEndDate %}
                                    DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                                {% elif col.isSystemCurrentFlag %}
                                    'N'
                                {% else %}
                                    "DIM"."{{ col.name }}"
                                {% endif %}
                                AS "{{ col.name }}",
                            {% endfor -%}
                                'update_expired_version_rows' AS "DML_OPERATION"
                            FROM (
                            {% endif %}
                            SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                            {% for col in source.columns if not (col.isSurrogateKey or
                                                                    col.isSystemVersion or
                                                                    col.isSystemCurrentFlag or
                                                                    col.isSystemStartDate or
                                                                    col.isSystemEndDate or
                                                                    col.isSystemUpdateDate or
                                                                    col.isSystemCreateDate) -%}
                                {{ get_source_transform(col) }} AS "{{ col.name }}"{% if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{  source.join  }}
                            {% if not loop.last %}
                                {{ desiredState.config.insertStrategy }}
                            {% endif %}
                            {% if loop.last %}
                                ) "RIE"
                            {% endif %}
                        {% endfor %}
                            INNER JOIN {{ fullyQualifiedTargetTableName }} "DIM" ON
                            {% for col in desiredState.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "RIE"."{{ col.name }}" = "DIM"."{{ col.name }}"
                            {% endfor %}
                            WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                            {% for col in desiredState.columns if (col.isChangeTracking == true) %}
                                {% if loop.first %}
                                    AND (
                                {% else %}
                                    OR
                                {% endif %}
                                ( NVL( CAST("RIE"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                           
                            {% if desiredState.config.groupByAll %}GROUP BY ALL{% endif %}
                                  {{ sortorder_by_colv() }})
                            

                            UNION ALL

                            /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                            This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        {% for source in desiredState.sources %}

                            

                            {% if loop.first %}
                            (SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                            {%- for col in desiredState.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                    "DIM"."{{ col.name }}"
                                {% elif col.isSystemCurrentFlag %}
                                    'Y'
                                {% else %}
                                    "RU"."{{ col.name }}"
                                {% endif %}
                                AS "{{ col.name }}",
                            {% endfor -%}
                                'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                            FROM (
                            {% endif %}
                            SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemCurrentFlag %}
                                    'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"{% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            {{  source.join  }}
                            {% if not loop.last %}
                               {{ desiredState.config.insertStrategy }}
                            {% endif %}
                            {% if loop.last %}
                                ) "RU"
                            {% endif %}
                        {% endfor %}
                            INNER JOIN {{ fullyQualifiedTargetTableName }} "DIM" ON
                            {% for col in desiredState.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "RU"."{{ col.name }}" = "DIM"."{{ col.name }}"
                            {% endfor %}
                            WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                            AND (
                            {% for col in desiredState.columns if (col.isChangeTracking) -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "RU"."{{ col.name }}" = "DIM"."{{ col.name }}"
                            {% endfor %} )
                            {% for col in desiredState.columns if not (   col.isBusinessKey or
                                                                    col.isChangeTracking or
                                                                    col.isSurrogateKey or
                                                                    col.isSystemVersion or
                                                                    col.isSystemCurrentFlag or
                                                                    col.isSystemStartDate or
                                                                    col.isSystemEndDate or
                                                                    col.isSystemUpdateDate or
                                                                    col.isSystemCreateDate) -%}
                                {% if loop.first %}
                                    AND (
                                {% endif %}
                                {% if not loop.first %}
                                    OR
                                {% endif %}
                                NVL( CAST("RU"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                            
                            {% if desiredState.config.groupByAll %}GROUP BY ALL{% endif %}
                             {{ sortorder_by_colv() }})
                        ) AS "SRC"
                        ON
                        {% for col in desiredState.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% endfor %}
                        AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                        WHEN MATCHED THEN UPDATE SET
                        {%- for col in desiredState.columns %}
                            {% if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                            "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                            {% endif %}
                        {% endfor -%}
                        WHEN NOT MATCHED THEN INSERT (
                        {%- for col in desiredState.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in desiredState.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )

                    {% else %}

                        /* Type 1 With No Change Tracking */
                        MERGE INTO {{ fullyQualifiedTargetTableName }} "TGT"
                        USING (
                        {% for source in desiredState.sources %}
                            {% if loop.first %}
                            
                                SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                            {% for col in desiredState.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                    1
                                {% elif col.isSystemCurrentFlag %}
                                    'Y'
                                {% else %}
                                "{{ col.name }}"
                                {% endif %}
                                AS "{{ col.name }}",
                            {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                            FROM (
                            {% endif %}
                            (SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                    1
                                {% elif col.isSystemCurrentFlag %}
                                    'Y'
                                {% else %}
                                {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"{% if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }}
                            {% if desiredState.config.groupByAll %}GROUP BY ALL{% endif %}
                            {{ sortorder_by_colv() }})
                            {% if not loop.last %}
                               {{ desiredState.config.insertStrategy }}
                            {% endif %}               
                            {% if loop.last %}
                                )) "SRC"
                            {% endif %}
                        {% endfor %}
                            ON
                            {% for col in desiredState.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                            {% endfor %}
                            WHEN MATCHED
                            {% for col in desiredState.columns if not (   col.isBusinessKey or
                                                                    col.isSurrogateKey or
                                                                    col.isSystemVersion or
                                                                    col.isSystemCurrentFlag or
                                                                    col.isSystemStartDate or
                                                                    col.isSystemEndDate or
                                                                    col.isSystemUpdateDate or
                                                                    col.isSystemCreateDate) %}
                                {% if loop.first %}
                                    AND (
                                {% else %}
                                    OR
                                {% endif %}
                                NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                            THEN UPDATE SET
                            {%- for col in desiredState.columns if not (  col.isBusinessKey or
                                                                    col.isSurrogateKey or
                                                                    col.isSystemVersion or
                                                                    col.isSystemCurrentFlag or
                                                                    col.isSystemStartDate or
                                                                    col.isSystemEndDate or
                                                                    col.isSystemCreateDate) %}
                                    "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor %}
                            WHEN NOT MATCHED THEN
                            INSERT (
                            {%- for col in desiredState.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                            VALUES (
                            {%- for col in desiredState.columns if not col.isSurrogateKey %}
                                "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                    {% endif %}

                    {%- if desiredState.config.schedulePeriodOption != 'Predecessor' -%} 
                        {{ stage('Resume Created Task', true, "sql", "alter") }}
                        ALTER TASK {{ fullyQualifiedTaskName }} RESUME;
                    {%- endif -%}

                {% else %}
                    {{ stage('Development Mode - No Task.') }}
                    select 1 = 0
                    
                {%- endif -%}
                
            {% elif currentState != undefined and desiredState == undefined %}

                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {% if currentState.config.devMode == false %}
                    {# FQ Root Task name #}
                    {% set fullyQualifiedRootTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + currentState.config.rootTask + '"'%}

                    {# Task Info #}
                    {% set taskName = currentState.node.name + '_TASK'  %}
                    {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 

                    {%- if currentState.config.schedulePeriodOption == 'Predecessor' -%} 
                    {{ stage('Suspend Root Task', true, "sql", "drop") }}
                        ALTER TASK IF EXISTS {{ fullyQualifiedRootTaskName }} SUSPEND
                    {{ stage('Drop Current Task', true, "sql", "drop") }}
                        DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
                    {%- else -%}
                    {{ stage('Drop Current Task', true, "sql", "drop") }}
                        DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
                    {%- endif -%}
                {%- endif -%}

            {%- else -%}

            {{ stage('No task edits.  Unknown state.') }}
            select 1 = 0

            {% endif %}
        run:
          templateString: |-
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Dimension With Task == #}
            {# == Node Type Description    : This node loads data into dimension table == #}

            {# Development mode -To test the SQL the task will execute to make sure it runs without errors and returns the expected data #}

            {{ stage('Load Data - Development Mode') }}
            {% if config.devMode == true %}
                {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% if is_type_2 %}
                    MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                    USING (
                    {% for source in sources %}
                        /* New Rows That Don't Exist */
                        {% if loop.first %}
                        (SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                        {% for col in columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                            "RI"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                        'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        FROM (
                        {% endif %}
                        SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                            {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"{% if not loop.last %}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                        {% if not loop.last %}
                            {{ config.insertStrategy }}
                        {% endif %}
                        {% if loop.last %}
                            ) "RI"
                        {% endif %}
                    {% endfor %}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                "RI"."{{ col.name }}" = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        {% if config.groupByAll %}GROUP BY ALL{% endif %}
                        {{ sortorder_by_colv() }})
                        
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                    {% for source in sources %}
                        {% if loop.first %}
                        (SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                        {% for col in columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                            "RIC"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        FROM (
                        {% endif %}
                        SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                        {% for col in source.columns if not (col.isSurrogateKey) -%}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"{% if not loop.last %}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                        {% if not loop.last %}
                            {{ config.insertStrategy }}
                        {% endif %}
                        {% if loop.last %}
                            ) "RIC"
                        {% endif %}
                    {% endfor %}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                "RIC"."{{ col.name }}" = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST("RIC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {% if config.groupByAll %}GROUP BY ALL{% endif %}
                        {{ sortorder_by_colv() }})
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                    {% for source in sources %}
                        {% if loop.first %}
                        (SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        FROM (
                        {% endif %}
                        SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                        {% for col in source.columns if not (col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"{% if not loop.last %}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                        {% if not loop.last %}
                            {{ config.insertStrategy }}
                        {% endif %}
                        {% if loop.last %}
                            ) "RIE"
                        {% endif %}
                    {% endfor %}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "RIE"."{{ col.name }}" = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST("RIE"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {% if config.groupByAll %}GROUP BY ALL{% endif %}
                        {{ sortorder_by_colv() }})

                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                    {% for source in sources %}
                        {% if loop.first %}
                        (SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                        {%- for col in columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                "RU"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        FROM (
                        {% endif %}
                        SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"{% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        {{ source.join }}
                        {% if not loop.last %}
                           {{ config.insertStrategy }}
                        {% endif %}
                        {% if loop.last %}
                            ) "RU"
                        {% endif %}
                    {% endfor %}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "RU"."{{ col.name }}" = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "RU"."{{ col.name }}" = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST("RU"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {% if config.groupByAll %}GROUP BY ALL{% endif %}
                        {{ sortorder_by_colv() }})
                    ) AS "SRC"
                    ON
                    {% for col in columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in columns %}
                        {% if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                        {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% else %}
                    MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                    USING (
                    {% for source in sources %}
                        /* Type 1 */
                        {% if loop.first %}
                        SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                        {% for col in columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                            "{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                        'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        FROM (
                        {% endif %}
                       (SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                            {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"{% if not loop.last %}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                        {% if config.groupByAll %}GROUP BY ALL{% endif %}
                        {{ sortorder_by_colv() }})
                        {% if not loop.last %}
                            {{ config.insertStrategy }}
                        {% endif %}
                        {% if loop.last %}
                            )) "SRC"
                        {% endif %}
                    {% endfor %}
                        ON
                        {% for col in columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                {% endif %}
            {% endif %}
    name: Dimension with Task
    version: 1
  StepType-150:
    id: "150"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Fact with Task
        plural: Facts
        short: TSKFCT
        tagColor: '#D9A438'

        deployStrategy: advanced

        config:
        - groupName: Options
          items:
          - displayName: Development Mode
            attributeName: devMode
            type: toggleButton
            isRequired: true
            default: true

          - type: multisourceToggle

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: false

            # Cluster Key-determine if a node is to be clustered or not #
            
          - type: toggleButton
            attributeName: clusterKey
            displayName: Cluster Key
            default: false
            isRequired: true

          - type: toggleButton
            attributeName: clusterKeyExpressions
            displayName: Allow Expressions in Cluster Key
            default: false
            isRequired: true
            enableIf: "{% if config.clusterKey %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfig
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnName
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and not config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfigExpressions
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnNameExpressions
               isRequired: false
          
            -  type: textBox
               displayName: Expression
               attributeName: sqlExpression
               default: "ex. trunc(<column_name>, -5)"
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

        - groupName: General Options
          items: 
            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct
              default: false
              enableIf: "{% if config.groupByAll %} false {% else %} true {% endif %}"

            - type: toggleButton
              attributeName: groupByAll
              displayName: Group By All
              enableIf: "{% if config.selectDistinct %} false {% else %} true {% endif %}"
              default: false

            - displayName: Order By
              attributeName: orderby
              type: toggleButton
              default: false
              enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

            - type: tabular
              displayName: 'Sort column'
              attributeName: orderbycolumn
              columns:

              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: sortColName

              -  type: dropdownSelector
                 displayName: Sort Order
                 attributeName: sortOrder
                 default: desc
                 options:
                 - desc
                 - asc
               
              isRequired: true
              enableIf: "{% if config.orderby %} true {% else %} false {% endif %}"
              
              
        - groupName: Scheduling Options

          # Schedule mode-specifies whether a warehouse or serverless compute is used to run the task #

          enableIf: "{% if config.devMode == true %} false {% else %} true {% endif %}" 
          items:
          - displayName: Scheduling Options
            attributeName: schedulingMode
            type: dropdownSelector
            default: Warehouse Task
            options:
              - Warehouse Task
              - Serverless Task
            isRequired: true

          # Checks whether source streams have data before executing a task #

          - displayName: When Source Stream has Data Flag
            attributeName: flagSrcStream
            type: toggleButton
            isRequired: true

          - displayName: Multiple Stream has Data Logic
            attributeName: multiStreamBehavior
            type: dropdownSelector
            default: AND
            options:
              - AND
              - OR
            isRequired: true
            enableIf: "{% if config.flagSrcStream == true %} true {% else %} false {% endif %}"

          # Warehouse name  you want the task to run #

          - displayName: Select Warehouse on which to run task
            attributeName: whName
            type: textBox
            default: '<WAREHOUSE_NAME>'
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Warehouse Task' %} true {% else %} false {% endif %}"

          - displayName: Select initial serverless Warehouse size
            attributeName: serverlessSize
            type: dropdownSelector
            default: 'MEDIUM'
            options:
              - XSMALL
              - SMALL
              - MEDIUM
              - LARGE
              - XLARGE
              - XXLARGE
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Serverless Task' %} true {% else %} false {% endif %}"

          # Way to schedule the task to run #

          - displayName: Task Schedule
            attributeName: schedulePeriodOption
            type: dropdownSelector
            default: Predecessor
            options:
              - Minutes
              - CRON
              - Predecessor
            isRequired: TRUE

          - displayName: Enter task schedule using minutes
            attributeName: schedulePeriod
            type: textBox
            default: '60'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Minutes' %} true {% else %} false {% endif %}"

          - displayName: Enter task schedule using CRON
            attributeName: scheduleCRON
            type: textBox
            default: '5 0-23 * * * America/Los_Angeles'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'CRON' %} true {% else %} false {% endif %}"

          - displayName: Enter predecessor task(s) seperated by a comma 
            attributeName: predTask
            type: textBox
            default: '"DATA_TRANSFORMATION_ROOT_TASK"'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

          - displayName: Enter root task name
            attributeName: rootTask
            type: textBox
            default: '"DATA_TRANSFORMATION_ROOT_TASK"'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

        - groupName: Hidden Config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: task
            options:
            - task
            isRequired: false

        systemColumns:
        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Fact With Task == #}
            {# == Node Type Description    : This node creates a fact table and a task to insert/merge data into fact table == #}


            {# Create / Alter Table first #}
            {% if desiredState == currentState %}

                {{ stage('No table edits.') }}
                select 1 = 0

            {% elif desiredState %}

                {% set targetTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

                {# Test if Business Key changed #}
                {% set nsVariables = namespace(businessKeyChanges=0) %}
                {% if currentState != undefined %}
                    {% for businessKeyCol in currentState.columns if nsVariables.colchanges == 0 %}        
                        {% if businessKeyCol.id in desiredState.columns | map(attribute="id") %}
                            {% set currentBusinessKeyCol = businessKeyCol.isBusinessKey %}

                            {% set desiredBusinessKeyCol = desiredState.columns | selectattr('id', "equalto", businessKeyCol.id) | map(attribute='isBusinessKey') | first %}

                            {% if currentBusinessKeyCol != desiredBusinessKeyCol %}
                                {% set nsVariables.businessKeyChanges = 1 %}
                            {% endif %}
                        {% endif %}
                    {% endfor %}

                    {% for businessKeyCol in desiredState.columns if nsVariables.businessKeyChanges == 0 %}        
                        {% if businessKeyCol.id in currentState.columns | map(attribute="id") %}
                            {% set desiredBusinessKeyCol = businessKeyCol.isBusinessKey %}

                            {% set currentBusinessKeyCol = currentState.columns | selectattr('id', "equalto", businessKeyCol.id) | map(attribute='isBusinessKey') | first %}

                            {% if currentBusinessKeyCol != desiredBusinessKeyCol %}
                                {% set nsVariables.businessKeyChanges = 1 %}
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                {% endif %}

                {# Figure out cluster key #}
                {% set nsVariables = namespace(finalClusterKey="") %}
                {% if desiredState.config.clusterKey == true %}
                    {% if desiredState.config.clusterKeyExpressions == true %}
                        {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                        {%- set nsVariables = namespace(clusterValues=[]) %}

                        {% for r in column %}
                            {% if expression[loop.index0] == "" %}
                                {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                            {% else %}
                                {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                            {% endif %}
                        {% endfor %}

                        {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                    {% else %}

                        {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                        {%- set nsVariables = namespace(clusterValues=[]) %}

                        {% for r in column %}
                            {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                        {% endfor %}

                        {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                    {% endif %}
                {% endif %}

                {% if currentState == undefined or nsVariables.colchanges == 1 %}
                    {{ stage('Create Fact Table', true, "sql", "alter") }}
                    CREATE OR REPLACE TABLE {{ fullyQualifiedTargetTableName }}
                    (
                        {% for col in desiredState.columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {% if col.isSurrogateKey %}
                                identity
                            {% endif %}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if desiredState.node.description | length > 0 %} 
                        COMMENT = '{{ desiredState.node.description | escape }}'
                    {% endif %}

                    {% if desiredState.config.clusterKey == true %}
                        {{ stage('Apply Table Clustering', true, "sql", "create") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} {{ nsVariables.finalClusterKey }}

                        {{ stage('Resume Recluster Table', true, "sql", "create") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} RESUME RECLUSTER
                    {% endif %}

                {% elif currentState != undefined %}

                    {# Change Node Name or Change Storage Location #}
                    {# Storage Location Tests #}
                    {# Only need to account for updated Storage Location mappings   #}
                    {# Current Namespace Varialbes #}
                    {% set nsVariables = namespace(nsCurrentDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentUsedStorageLocations="") %}

                    {# Current State Storage Location Info #}
                    {% for source in currentState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsCurrentDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nsCurrentDepStorageLocations = nsVariables.nsCurrentDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsCurrentTargetStorageLocations = currentState.node.location.name  %}

                    {% set nsVariables.nsCurrentUsedStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentTargetStorageLocations %}

                    {% set currentStorageLocations = (nsVariables.nsCurrentUsedStorageLocations).split(',') | list %}
                    {% set currentUniqueStorageLocations = currentStorageLocations | unique | sort | list %}

                    {# Desired Namespace Variables #}
                    {% set nsVariables = namespace(nsDesiredDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredUsedStorageLocations="") %}

                    {% set nsVariables = namespace(storageLocationTest="") %}
                    

                    {# Desired State Storage Location Info #}
                    {% for source in desiredState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nnsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

                    {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

                    {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
                    {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}

                    {# Test  #}
                    {% set nsVariables.storageLocationTest = true %}
                    {% set nodeCommentTest = currentState.node.description == desiredState.node.description %}
                    
                    {% for name in desiredUniqueStorageLocations if nsVariables.storageLocationTest == true %}
                        {# Current mappings #}
                        {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                        
                        {# Desired mappings #}
                        {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                        {% if currentDatabaseSchema != desiredDatabaseSchema %}
                            {% set nsVariables.storageLocationTest = false %}
                        {% endif %}
                    {% endfor %}

                    {# Clustering Test #}
                    {% set clusterKeyTest = currentState.config.clusterKey == desiredState.config.clusterKey %}
                    {% set clusterKeyExpressionsTest = currentState.config.clusterKeyExpressions == desiredState.config.clusterKeyExpressions %}
                    {% set clusterKeyConfigTest = currentState.config.clusterKeyConfig == desiredState.config.clusterKeyConfig %}
                    {% set clusterKeyConfigExpressionsTest = currentState.config.clusterKeyConfigExpressions == desiredState.config.clusterKeyConfigExpressions %}

                    {% if 
                        clusterKeyTest == false or
                        clusterKeyExpressionsTest == false or
                        clusterKeyConfigTest == false or
                        clusterKeyConfigExpressionsTest == false %}

                        {% set clusterTest = false %}
                    {% else %}
                        {% set clusterTest = true %}
                    {% endif %}

                    {# Rename / Move Object #}
                    {% if (nsVariables.storageLocationTest == false or currentState.node.name != desiredState.node.name) %}
                        {{ stage('Rename and / or Move Table', true, "sql", "alter") }}
                        ALTER TABLE {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                        RENAME TO   {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                    {% endif %}

                    {# Change table description #}
                    {% if (nsVariables.nodeCommentTest == false or currentState.node.description != desiredState.node.description) %}
                        {{ stage('Change table description', true, "sql", "alter") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        SET COMMENT = '{{ desiredState.node.description | escape }}'
                    {% endif %}

                    {# Drop Columns #}
                    {% set nsVariables = namespace(colchanges=0) %}
                    {% for dropCurCol in currentState.columns %}
                        {% if dropCurCol.id not in desiredState.columns | map(attribute="id") %}
                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                            {% if nsVariables.colchanges == 1 %}
                                {{ stage('Drop Columns', true, "sql", "alter") }}
                                ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                DROP COLUMN 
                            {% else %}
                                , 
                            {% endif %}
                            "{{ dropCurCol.name }}"
                        {% endif %}
                    {% endfor %}

                    {# Add Columns #}
                    {% set nsVariables = namespace(colchanges=0) %}
                    {% for addDesCol in desiredState.columns %}
                        {% if addDesCol.id not in currentState.columns | map(attribute="id") %}
                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                            {% if nsVariables.colchanges == 1 %}
                                {{ stage('Add Columns', true, "sql", "alter") }}
                                ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                ADD COLUMN
                            {% else %}
                                ,
                            {% endif %}
                                "{{ addDesCol.name }}" {{ addDesCol.dataType }}
                                {%- if not addDesCol.nullable %} NOT NULL
                                    {%- if addDesCol.defaultValue | length > 0 %} DEFAULT {{ addDesCol.defaultValue }}{% endif %}
                                {% endif %}
                                {%- if addDesCol.description | length > 0 %} COMMENT '{{ addDescol.description | escape }}'{% endif %}
                        {% endif %}
                    {% endfor %}

                    {# Rename Columns #}
                    {% for renameCurCol in currentState.columns %}
                        {% if renameCurCol.id in desiredState.columns | map(attribute="id") %}
                            {% set desiredColumnName = desiredState.columns | selectattr('id', 'equalto', renameCurCol.id) | map(attribute='name') | first %}
                            {% if renameCurCol.name != desiredColumnName %}
                                {{ stage('Rename Column ' + renameCurCol.name, true, "sql", "alter") }}
                                ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                RENAME COLUMN "{{ renameCurCol.name }}"
                                TO "{{ desiredColumnName }}"
                            {% endif %}
                        {% endif %}
                    {% endfor %}

                    {# Change data types or other column level chnages #}
                    
                    {% set nsVariables.colchanges = 0 %}
                    {% for alterCurCol in currentState.columns %}        
                        {% if alterCurCol.id in desiredState.columns | map(attribute="id") %}
                            {% set currentDatatype = alterCurCol.dataType %}
                            {% set currentNullable = alterCurCol.nullable %}
                            {% set currentDefaultValue = alterCurCol.defaultValue %}
                            {% set currentDescription = alterCurCol.description %}

                            {% set desiredColumnName = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='name') | first %}
                            {% set desiredDatatype = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='dataType') | first %}
                            {% set desiredNullable = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='nullable') | first %}
                            {% set desiredDefaultValue = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='defaultValue') | first %}
                            {% set desiredDescription = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='description') | first %}

                            {% set datatypeTest = currentDatatype == desiredDatatype %}
                            {% set nullableTest = currentNullable == desiredNullable %}
                            {% set defaultValueTest = currentDefaultValue == desiredDefaultValue %}
                            {% set descriptionTest = currentDescription == desiredDescription %}

                            {% if (datatypeTest == false or 
                                    nullableTest == false  or
                                    defaultValueTest == false or
                                    descriptionTest == false) %}
                                {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                {% if nsVariables.colchanges == 1 %}
                                    {{ stage('Change Column Attributes', true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    MODIFY
                                {% endif %}
                                {% if datatypeTest == false %}
                                    {% if nsVariables.colchanges > 1 %},{% endif %}
                                    COLUMN "{{ desiredColumnName }}"
                                    SET DATA TYPE {{ desiredDatatype }}
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                {% endif %}
                                {% if nullableTest == false %}
                                    {% if nsVariables.colchanges > 1 %},{% endif %}
                                    COLUMN "{{ desiredColumnName }}"
                                    {% if currentNullable == true %}
                                        SET
                                    {% else %}
                                        DROP
                                    {% endif %}
                                    NOT NULL
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                {% endif %}
                                {% if descriptionTest == false %}
                                    {% if nsVariables.colchanges > 1 %},{% endif %}
                                    COLUMN "{{ desiredColumnName }}"
                                    COMMENT '{{ desiredDescription }}'
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                {% endif %}
                                {% if defaultValueTest == false %}
                                    {% if nsVariables.colchanges > 1 %},{% endif %}
                                    COLUMN "{{ desiredColumnName }}"
                                    {% if desiredDefaultValue == '' %}
                                        DROP DEFAULT
                                    {% else %}
                                        SET DEFAULT {{ desiredDefaultValue }}
                                    {% endif %}
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                {% endif %}
                                
                            {% else %}
                                                    
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                    
                    {# Figure out cluster key #}
                    {% set nsVariables = namespace(finalClusterKey="") %}
                    {% if clusterTest == false %}
                        {% if desiredState.config.clusterKeyExpressions == true %}
                            {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% if expression[loop.index0] == "" %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% else %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                {% endif %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% elif desiredState.config.clusterKey == true %}

                            {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}
                        
                        {% else %}

                            {% set nsVariables.finalClusterKey = 'DROP CLUSTERING KEY' %}

                        {% endif %}

                        {{ stage('Recluster TABLE', true, "sql", "create") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        {{ nsVariables.finalClusterKey }}

                    {% endif %}
                {% endif %}

            {% elif currentState != undefined and desiredState == undefined %}

                {# Table or View Name #}
                {% set targetObjectDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetObjectSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetObjectName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {{ stage('Drop Table', true, "sql", "drop") }}
                DROP {{ currentState.node.materializationType }} IF EXISTS {{ fullyQualifiedTargetObjectName }}

            {%- else -%}

            {{ stage('No table edits.  Unknown state.') }}
            select 1 = 0

            {% endif %}

            {# Create Task Second #}
            {% if desiredState == currentState %}

                {{ stage('No task edits.') }}
                select 1 = 0

            {% elif desiredState %}

                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}


                {% if desiredState.config.devMode == false %}
                    {%- if desiredState.config.schedulePeriodOption == 'Predecessor' -%} 
                        {%- set fullyQualifiedRootTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + desiredState.config.rootTask + '"' -%} 
                        {{ stage('Suspend Root Task', true, "sql", "alter") }}
                        ALTER TASK {{ fullyQualifiedRootTaskName }} SUSPEND
                    {%- endif -%}

                    {{ stage('Create Task', true, "sql", "alter") }}
                    {# Set Namespace Variables #}
                    {% set nsVariables = namespace(taskWhenRun="") %}
                    {% set nsVariables = namespace(poll="WHEN ") %}

                    {# Task Info #}
                    {% set taskName = desiredState.node.name + '_TASK'  %}
                    {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 

                    {# Task Type #}
                    {%- if desiredState.config.schedulingMode == 'Warehouse Task' -%} 
                        {# Can be updated during deployment via a parameter to account for different warehouse names in different deployments #}
                        {% if desiredState.parameters.targetTaskWarehouse == 'DEV ENVIRONMENT' %}
                            {% set taskType = 'WAREHOUSE = ' + desiredState.config.whName %}
                        {% else %}
                            {% set taskType = 'WAREHOUSE = ' + desiredState.parameters.targetTaskWarehouse %}
                        {% endif %}
                    {%- else -%}
                        {%- set taskType = 'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = ' + desiredState.config.serverlessSize -%} 
                    {%- endif -%}

                    {# Schedule Type #}
                    {%- if desiredState.config.schedulePeriodOption == 'Minutes' -%} 
                        {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + desiredState.config.schedulePeriod + ' MINUTE' + "'" -%} 
                    {% elif desiredState.config.schedulePeriodOption == 'CRON' %}
                        {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + 'USING CRON ' + desiredState.config.scheduleCRON + "'" %}
                    {%- else -%}
                        {%- set nsVariables.taskWhenRun = 'AFTER ' -%}
                        {%- set predecessorTasks = (desiredState.config.predTask).split(",") -%}

                        {%- for p in predecessorTasks -%}
                            {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + targetTableDatabase + '.' + targetTableSchema + '.' + p -%}
                            {%- if not loop.last -%} 
                                {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + ',' -%}
                            {%- endif %}
                        {% endfor %}    
                    {%- endif -%}

                    {# When Stream has data logic #}
                    {# Source Stream Location and Name #}
                    {% if desiredState.config.flagSrcStream == true %}
                        {% for source in desiredState.sources %}
                            {% for dep in source.dependencies %}
                                {% if (dep.node.materializationType == 'stream') %}
                                    {% set streamStorageLocation = dep.node.location.name %}
                                    {% set streamSourceDatabase = desiredState.storageLocations | selectattr('name', 'equalto', streamStorageLocation) | map(attribute='database') | first %}
                                    {% set streamSourceSchema = desiredState.storageLocations | selectattr('name', 'equalto', streamStorageLocation) | map(attribute='schema') | first %}
                                    {% set streamSourceName = dep.node.name %}

                                    {%- if nsVariables.poll == 'WHEN ' -%}
                                        {% set nsVariables.poll = nsVariables.poll + 'SYSTEM$STREAM_HAS_DATA(\'"' + streamSourceDatabase + '"."'  + streamSourceSchema + '"."' + streamSourceName + '"\')'  %}
                                    {% else %}
                                        {% set nsVariables.poll = nsVariables.poll + desiredState.config.multiStreamBehavior + ' SYSTEM$STREAM_HAS_DATA(\'"' + streamSourceDatabase + '"."'  + streamSourceSchema + '"."' + streamSourceName + '"\')'  %}
                                    {%- endif -%}
                                {%- endif -%}
                            {% endfor %}
                        {% endfor %}
                    {% endif -%}

                    {# To mimic truncate behavior #}
                    {% if desiredState.config.truncateBefore == true %}
                        {% set truncateBehavior = 'INSERT OVERWRITE' %}
                    {% else %}
                        {% set truncateBehavior = 'INSERT' %}
                    {% endif -%}

                    CREATE OR REPLACE TASK 
                        {{ fullyQualifiedTaskName }} 
                        {{ taskType}} 
                        {{ nsVariables.taskWhenRun }} 
                        {% if nsVariables.poll != 'WHEN ' %} {{ nsVariables.poll }} {% endif %}
                    AS 

                    {% set has_business_key = desiredState.columns | selectattr('isBusinessKey') | list | length > 0 %}
                    {% if has_business_key %}        
                        /* If has business key then MERGE */
                        MERGE INTO {{ fullyQualifiedTargetTableName }} "TGT" USING (
                            {% for source in desiredState.sources %}
                                /* Combine Sources if needed */
                                {% if loop.first %}
                                   ( SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                                    {% for col in source.columns  %}
                                        {% if (col.isSystemUpdateDate or col.isSystemCreateDate) %}
                                            {{ col.transform }} AS "{{ col.name }}"
                                        {% else %}
                                            "{{ col.name }}" AS "{{ col.name }}"
                                        {% endif %}
                                        {% if not loop.last %}, {% endif %}
                                    {% endfor %}
                                    FROM (
                                {% endif %}
                                SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                                {% for col in source.columns if not (col.isSurrogateKey or col.isSystemCreateDate or col.isSystemUpdateDate ) %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"{% if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                                {% if not loop.last %}
                                    {{ desiredState.config.insertStrategy }}
                                {% endif %}
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                            {% if desiredState.config.groupByAll %}GROUP BY ALL{% endif %}
                           {{sortorder_by_colv()}})
                        ) AS "SRC"
                        ON
                        {% for col in desiredState.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in desiredState.columns if not (col.isBusinessKey or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in desiredState.columns if not (col.isBusinessKey or col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in desiredState.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in desiredState.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% else %}
                        /* No Business Key */
                        INSERT INTO {{ fullyQualifiedTargetTableName }}
                        (
                            {% for col in desiredState.columns %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )
                    
                        {% for source in desiredState.sources %}
                            /* Combine Sources if needed */
                            {% if loop.first %}
                               ( SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                                {% for col in desiredState.columns  %}
                                    "{{ col.name }}" AS "{{ col.name }}"
                                    {% if not loop.last %}, {% endif %}
                                {% endfor %}
                                FROM 
                            {% endif %}
                           ( SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {{ get_source_transform(col) }} AS "{{ col.name }}"{% if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }}
                            {% if desiredState.config.groupByAll %}GROUP BY ALL{% endif %}
                            {{ sortorder_by_colv() }})
                            {% if not loop.last %}
                                {{ desiredState.config.insertStrategy }}
                            {% endif %}
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    {% endif %}

                    {%- if desiredState.config.schedulePeriodOption != 'Predecessor' -%} 
                        {{ stage('Resume Created Task', true, "sql", "alter") }}
                        ALTER TASK {{ fullyQualifiedTaskName }} RESUME;
                    {%- endif -%}

                {% else %}
                    {{ stage('Development Mode - No Task.') }}
                    select 1 = 0
                    
                {%- endif -%}
                
            {% elif currentState != undefined and desiredState == undefined %}

                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {% if currentState.config.devMode == false %}
                    {# FQ Root Task name #}
                    {% set fullyQualifiedRootTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + currentState.config.rootTask + '"'%}

                    {# Task Info #}
                    {% set taskName = currentState.node.name + '_TASK'  %}
                    {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 

                    {%- if currentState.config.schedulePeriodOption == 'Predecessor' -%} 
                    {{ stage('Suspend Root Task', true, "sql", "drop") }}
                        ALTER TASK IF EXISTS {{ fullyQualifiedRootTaskName }} SUSPEND
                    {{ stage('Drop Current Task', true, "sql", "drop") }}
                        DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
                    {%- else -%}
                    {{ stage('Drop Current Task', true, "sql", "drop") }}
                        DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
                    {%- endif -%}
                {%- endif -%}

            {%- else -%}

            {{ stage('No task edits.  Unknown state.') }}
            select 1 = 0

            {% endif %}
        run:
          templateString: |-
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Fact With Task == #}
            {# == Node Type Description    : This node loads data into fact table == #}


            {# Target Table Info #}
            {% set targetTableDatabase = ref_no_link(node.location.name, node.name).split('.')[0] %} 
            {% set targetTableSchema = ref_no_link(node.location.name, node.name).split('.')[1] %} 
            {% set fullyQualifiedTargetTableName = ref_no_link(node.location.name, node.name) %}

            {# Development mode -To test the SQL the task will execute to make sure it runs without errors and returns the expected data #}

            {% if config.devMode == true %}
                {{ stage('Load Data - Development Mode') }}
                {% set has_business_key = columns | selectattr('isBusinessKey') | list | length > 0 %}

                {% if has_business_key %}        
                    /* With Business Key */
                    MERGE INTO {{ fullyQualifiedTargetTableName }} "TGT" USING (
                        {% for source in sources %}
                            /* Combine Sources if needed */
                            {% if loop.first %}
                                SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                                {% for col in source.columns  %}
                                    {% if (col.isSystemUpdateDate or col.isSystemCreateDate) %}
                                        {{ col.transform }} AS "{{ col.name }}"
                                    {% else %}
                                        "{{ col.name }}" AS "{{ col.name }}"
                                    {% endif %}
                                    {% if not loop.last %}, {% endif %}
                                {% endfor %}
                                FROM (
                            {% endif %}
                            (SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                            {% for col in source.columns if not (col.isSurrogateKey or col.isSystemCreateDate or col.isSystemUpdateDate ) %}
                                {{ get_source_transform(col) }} AS "{{ col.name }}"{% if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }}
                            {% if config.groupByAll %}GROUP BY ALL{% endif %}
                            {{ sortorder_by_colv() }})
                            {% if not loop.last %}
                                {{ config.insertStrategy }}
                            {% endif %}
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                    {% endfor %}
                    WHEN MATCHED
                    {% for col in columns if not (col.isBusinessKey or
                                                            col.isSystemUpdateDate or
                                                            col.isSystemCreateDate) %}
                        {% if loop.first %}
                            AND (
                        {% else %}
                            OR
                        {% endif %}
                        NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                        {% if loop.last %}
                            )
                        {% endif %}
                    {% endfor %}
                    THEN UPDATE SET
                    {%- for col in columns if not (col.isBusinessKey or col.isSystemCreateDate) %}
                            "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor %}
                    WHEN NOT MATCHED THEN
                    INSERT (
                    {%- for col in columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                {% else %}
                    /* No Business Key */
                    INSERT INTO {{ fullyQualifiedTargetTableName }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}"
                            {%- if not loop.last -%},{% endif %}
                        {% endfor %}
                    )
                
                    {% for source in sources %}
                        /* Combine Sources if needed */
                        {% if loop.first %}
                            SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                            {% for col in columns  %}
                                "{{ col.name }}" AS "{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor %}
                            FROM (
                        {% endif %}
                        (SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"{% if not loop.last %}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                        {% if config.groupByAll %}GROUP BY ALL{% endif %}
                        {{ sortorder_by_colv() }})
                        {% if not loop.last %}
                            {{ config.insertStrategy }}
                        {% endif %}
                        {% if loop.last %}
                            )
                        {% endif %}
                    {% endfor %}
                {% endif %}
            {% endif %}
    name: Fact with Task
    version: 1
  StepType-151:
    id: "151"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |+
        capitalized: Work with Task
        short: TSKWRK
        plural: Stages
        tagColor: "#FF851F"

        deployStrategy: advanced

        config:
        - groupName: Options
          items:
          - displayName: Development Mode
            attributeName: devMode
            type: toggleButton
            isRequired: true
            default: true

        # Cluster Key-determine if a node is to be clustered or not #

          - type: toggleButton
            attributeName: clusterKey
            displayName: Cluster Key
            default: false
            isRequired: true

          - type: toggleButton
            attributeName: clusterKeyExpressions
            displayName: Allow Expressions in Cluster Key
            default: false
            isRequired: true
            enableIf: "{% if config.clusterKey %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfig
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnName
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and not config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfigExpressions
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnNameExpressions
               isRequired: false
          
            -  type: textBox
               displayName: Expression
               attributeName: sqlExpression
               default: "ex. trunc(<column_name>, -5)"
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

          - type: multisourceToggle

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
            
          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: false


        - groupName: General Options
          items:

          - type: toggleButton
            attributeName: selectDistinct
            displayName: Distinct
            default: false
            enableIf: "{% if config.groupByAll %} false {% else %} true {% endif %}"

          - type: toggleButton
            attributeName: groupByAll
            displayName: Group By All
            enableIf: "{% if config.selectDistinct %} false {% else %} true {% endif %}"
            default: false
             
          - displayName: Order By
            attributeName: orderby
            type: toggleButton
            default: false
            enableIf: "{% if node.materializationType == 'view' %} false {% else %} true {% endif %}"

          - type: tabular
            displayName: 'Sort column'
            attributeName: orderbycolumn
            columns:

              -  type: columnDropdownSelector
                 displayName: Column Name
                 attributeName: sortColName

              -  type: dropdownSelector
                 displayName: Sort Order
                 attributeName: sortOrder
                 default: desc
                 options:
                 - desc
                 - asc
               
            isRequired: true
            enableIf: "{% if config.orderby %} true {% else %} false {% endif %}"

              
        - groupName: Scheduling Options

         # Schedule mode-specifies whether a warehouse or serverless compute is used to run the task #

          enableIf: "{% if config.devMode == true %} false {% else %} true {% endif %}" 
          items:
          - displayName: Scheduling Mode
            attributeName: schedulingMode
            type: dropdownSelector
            default: Warehouse Task
            options:
              - Warehouse Task
              - Serverless Task
            isRequired: true

          # Checks whether source streams have data before executing a task #

          - displayName: When Source Stream has Data Flag
            attributeName: flagSrcStream
            type: toggleButton
            default: true
            isRequired: true

          - displayName: Multiple Stream has Data Logic
            attributeName: multiStreamBehavior
            type: dropdownSelector
            default: AND
            options:
              - AND
              - OR
            isRequired: true
            enableIf: "{% if config.flagSrcStream == true %} true {% else %} false {% endif %}"

          # Warehouse name you want the task to run #

          - displayName: Select Warehouse on which to run task
            attributeName: whName
            type: textBox
            default: '<WAREHOUSE_NAME>'
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Warehouse Task' %} true {% else %} false {% endif %}"

          - displayName: Select initial serverless Warehouse size
            attributeName: serverlessSize
            type: dropdownSelector
            default: 'MEDIUM'
            options:
              - XSMALL
              - SMALL
              - MEDIUM
              - LARGE
              - XLARGE
              - XXLARGE
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Serverless Task' %} true {% else %} false {% endif %}"

          # Way to schedule the task to run #

          - displayName: Task Schedule
            attributeName: schedulePeriodOption
            type: dropdownSelector
            default: Predecessor
            options:
              - Minutes
              - CRON
              - Predecessor
            isRequired: true

          - displayName: Enter task schedule using minutes
            attributeName: schedulePeriod
            type: textBox
            default: '60'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Minutes' %} true {% else %} false {% endif %}"

          - displayName: Enter task schedule using CRON
            attributeName: scheduleCRON
            type: textBox
            default: '5 0-23 * * * America/Los_Angeles'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'CRON' %} true {% else %} false {% endif %}"

          - displayName: Enter predecessor task(s) separated by a comma
            attributeName: predTask
            type: textBox
            default: 'DATA_TRANSFORMATION_ROOT_TASK'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

          - displayName: Enter root task name
            attributeName: rootTask
            type: textBox
            default: 'DATA_TRANSFORMATION_ROOT_TASK'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

        - groupName: Hidden Config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: task
            options:
            - task
            isRequired: false

      templates:
        create:
          templateString: |-
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Work With Task == #}
            {# == Node Type Description    : This node creates a work table and a task to insert data into work table == #}

            {# Create / Alter Table first #}
            {% if desiredState == currentState %}

                {{ stage('No table edits.') }}
                select 1 = 0

            {% elif desiredState %}

                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

                {% if currentState == undefined %}
                    {# Figure out cluster key #}
                    {% set nsVariables = namespace(finalClusterKey="") %}
                    {% if desiredState.config.clusterKey == true %}
                        {% if desiredState.config.clusterKeyExpressions == true %}
                            {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% if expression[loop.index0] == "" %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% else %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                {% endif %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% else %}

                            {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% endif %}
                    {% endif %}

                    {{ stage('Create Work Table', true, "sql", "create") }}
                    CREATE OR REPLACE TABLE {{ fullyQualifiedTargetTableName }}
                    (
                        {% for col in desiredState.columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}

                    {% if desiredState.config.clusterKey == true %}
                        {{ stage('Apply Table Clustering', true, "sql", "create") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} {{ nsVariables.finalClusterKey }}

                        {{ stage('Resume Recluster Table', true, "sql", "create") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} RESUME RECLUSTER
                    {% endif %}

                {% elif currentState != undefined %}

                    {# Change Node Name or Change Storage Location #}
                    {# Storage Location Tests #}
                    {# Only need to account for updated Storage Location mappings   #}
                    {# Current Namespace Varialbes #}
                    {% set nsVariables = namespace(nsCurrentDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentUsedStorageLocations="") %}

                    {# Current State Storage Location Info #}
                    {% for source in currentState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsCurrentDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nsCurrentDepStorageLocations = nsVariables.nsCurrentDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsCurrentTargetStorageLocations = currentState.node.location.name  %}

                    {% set nsVariables.nsCurrentUsedStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentTargetStorageLocations %}

                    {% set currentStorageLocations = (nsVariables.nsCurrentUsedStorageLocations).split(',') | list %}
                    {% set currentUniqueStorageLocations = currentStorageLocations | unique | sort | list %}

                    {# Desired Namespace Variables #}
                    {% set nsVariables = namespace(nsDesiredDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredUsedStorageLocations="") %}

                    {% set nsVariables = namespace(storageLocationTest="") %}

                    {# Desired State Storage Location Info #}
                    {% for source in desiredState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nnsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

                    {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

                    {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
                    {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}

                    {# Test  #}
                    {% set nsVariables.storageLocationTest = true %}
                    {% set nodeCommentTest = currentState.node.description == desiredState.node.description %}

                    {% for name in desiredUniqueStorageLocations if nsVariables.storageLocationTest == true %}
                        {# Current mappings #}
                        {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                        
                        {# Desired mappings #}
                        {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                        {% if currentDatabaseSchema != desiredDatabaseSchema %}
                            {% set nsVariables.storageLocationTest = false %}
                        {% endif %}
                    {% endfor %}

                    {# Clustering Test #}
                    {% set clusterKeyTest = currentState.config.clusterKey == desiredState.config.clusterKey %}
                    {% set clusterKeyExpressionsTest = currentState.config.clusterKeyExpressions == desiredState.config.clusterKeyExpressions %}
                    {% set clusterKeyConfigTest = currentState.config.clusterKeyConfig == desiredState.config.clusterKeyConfig %}
                    {% set clusterKeyConfigExpressionsTest = currentState.config.clusterKeyConfigExpressions == desiredState.config.clusterKeyConfigExpressions %}

                    {% if 
                        clusterKeyTest == false or
                        clusterKeyExpressionsTest == false or
                        clusterKeyConfigTest == false or
                        clusterKeyConfigExpressionsTest == false %}

                        {% set clusterTest = false %}
                    {% else %}
                        {% set clusterTest = true %}
                    {% endif %}

                    {# Rename / Move Object #}
                    {% if (nsVariables.storageLocationTest == false or currentState.node.name != desiredState.node.name) %}
                        {{ stage('Rename and / or Move Table', true, "sql", "alter") }}
                        ALTER TABLE {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                        RENAME TO   {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                    {% endif %}

                    {# Change table description #}
                    {% if (nsVariables.nodeCommentTest == false or currentState.node.description != desiredState.node.description) %}
                        {{ stage('Change table description', true, "sql", "alter") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        SET COMMENT = '{{ desiredState.node.description | escape }}'
                    {% endif %}


                    {# Drop Columns #}
                    {% set nsVariables = namespace(colchanges=0) %}
                    {% for dropCurCol in currentState.columns %}
                        {% if dropCurCol.id not in desiredState.columns | map(attribute="id") %}
                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                            {% if nsVariables.colchanges == 1 %}
                                {{ stage('Drop Columns', true, "sql", "alter") }}
                                ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                DROP COLUMN 
                            {% else %}
                                , 
                            {% endif %}
                            "{{ dropCurCol.name }}"
                        {% endif %}
                    {% endfor %}

                    {# Add Columns #}
                    {% set nsVariables = namespace(colchanges=0) %}
                    {% for addDesCol in desiredState.columns %}
                        {% if addDesCol.id not in currentState.columns | map(attribute="id") %}
                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                            {% if nsVariables.colchanges == 1 %}
                                {{ stage('Add Columns', true, "sql", "alter") }}
                                ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                ADD COLUMN
                            {% else %}
                                ,
                            {% endif %}
                                "{{ addDesCol.name }}" {{ addDesCol.dataType }}
                                {%- if not addDesCol.nullable %} NOT NULL
                                    {%- if addDesCol.defaultValue | length > 0 %} DEFAULT {{ addDesCol.defaultValue }}{% endif %}
                                {% endif %}
                                {%- if addDesCol.description | length > 0 %} COMMENT '{{ addDescol.description | escape }}'{% endif %}
                        {% endif %}
                    {% endfor %}

                    {# Rename Columns #}
                    {% for renameCurCol in currentState.columns %}
                        {% if renameCurCol.id in desiredState.columns | map(attribute="id") %}
                            {% set desiredColumnName = desiredState.columns | selectattr('id', 'equalto', renameCurCol.id) | map(attribute='name') | first %}
                            {% if renameCurCol.name != desiredColumnName %}
                                {{ stage('Rename Column ' + renameCurCol.name, true, "sql", "alter") }}
                                ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                RENAME COLUMN "{{ renameCurCol.name }}"
                                TO "{{ desiredColumnName }}"
                            {% endif %}
                        {% endif %}
                    {% endfor %}

                    {# Change data types or other column level chnages #}
                    
                    {% set nsVariables.colchanges = 0 %}
                    {% for alterCurCol in currentState.columns %}        
                        {% if alterCurCol.id in desiredState.columns | map(attribute="id") %}
                            {% set currentDatatype = alterCurCol.dataType %}
                            {% set currentNullable = alterCurCol.nullable %}
                            {% set currentDefaultValue = alterCurCol.defaultValue %}
                            {% set currentDescription = alterCurCol.description %}

                            {% set desiredColumnName = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='name') | first %}
                            {% set desiredDatatype = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='dataType') | first %}
                            {% set desiredNullable = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='nullable') | first %}
                            {% set desiredDefaultValue = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='defaultValue') | first %}
                            {% set desiredDescription = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='description') | first %}

                            {% set datatypeTest = currentDatatype == desiredDatatype %}
                            {% set nullableTest = currentNullable == desiredNullable %}
                            {% set defaultValueTest = currentDefaultValue == desiredDefaultValue %}
                            {% set descriptionTest = currentDescription == desiredDescription %}

                            {% if (datatypeTest == false or 
                                    nullableTest == false  or
                                    defaultValueTest == false or
                                    descriptionTest == false) %}
                                {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                {% if nsVariables.colchanges == 1 %}
                                    {{ stage('Change Column Attributes', true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    MODIFY
                                {% endif %}
                                {% if datatypeTest == false %}
                                    {% if nsVariables.colchanges > 1 %},{% endif %}
                                    COLUMN "{{ desiredColumnName }}"
                                    SET DATA TYPE {{ desiredDatatype }}
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                {% endif %}
                                {% if nullableTest == false %}
                                    {% if nsVariables.colchanges > 1 %},{% endif %}
                                    COLUMN "{{ desiredColumnName }}"
                                    {% if currentNullable == true %}
                                        SET
                                    {% else %}
                                        DROP
                                    {% endif %}
                                    NOT NULL
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                {% endif %}
                                {% if descriptionTest == false %}
                                    {% if nsVariables.colchanges > 1 %},{% endif %}
                                    COLUMN "{{ desiredColumnName }}"
                                    COMMENT '{{ desiredDescription }}'
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                {% endif %}
                                {% if defaultValueTest == false %}
                                    {% if nsVariables.colchanges > 1 %},{% endif %}
                                    COLUMN "{{ desiredColumnName }}"
                                    {% if desiredDefaultValue == '' %}
                                        DROP DEFAULT
                                    {% else %}
                                        SET DEFAULT {{ desiredDefaultValue }}
                                    {% endif %}
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                {% endif %}
                                
                            {% else %}
                                                    
                            {% endif %}
                        {% endif %}
                    {% endfor %}

                    {# Figure out cluster key #}
                    {% set nsVariables = namespace(finalClusterKey="") %}
                    {% if clusterTest == false %}
                        {% if desiredState.config.clusterKeyExpressions == true %}
                            {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% if expression[loop.index0] == "" %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% else %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                {% endif %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% elif desiredState.config.clusterKey == true %}

                            {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}
                        
                        {% else %}

                            {% set nsVariables.finalClusterKey = 'DROP CLUSTERING KEY' %}

                        {% endif %}

                        {{ stage('Recluster TABLE', true, "sql", "create") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        {{ nsVariables.finalClusterKey }}

                    {% endif %}
                {% endif %}

            {% elif currentState != undefined and desiredState == undefined %}

                {# Table or View Name #}
                {% set targetObjectDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetObjectSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetObjectName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {{ stage('Drop Table', true, "sql", "drop") }}
                DROP {{ currentState.node.materializationType }} IF EXISTS {{ fullyQualifiedTargetObjectName }}

            {%- else -%}

            {{ stage('No table edits.  Unknown state.') }}
            select 1 = 0

            {% endif %}

            {# Create Task Second #}
            {% if desiredState == currentState %}

                {{ stage('No task edits.') }}
                select 1 = 0

            {% elif desiredState %}

                    {# Target Table Info #}
                    {% set targetTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                    {% set targetTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                    {% set fullyQualifiedTargetTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}


                    {% if desiredState.config.devMode == false %}
                        {%- if desiredState.config.schedulePeriodOption == 'Predecessor' -%} 
                            {%- set fullyQualifiedRootTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + desiredState.config.rootTask + '"' -%} 
                            {{ stage('Suspend Root Task', true, "sql", "alter") }}
                            ALTER TASK {{ fullyQualifiedRootTaskName }} SUSPEND
                        {%- endif -%}

                        {{ stage('Create Task', true, "sql", "alter") }}
                        {# Set Namespace Variables #}
                        {% set nsVariables = namespace(taskWhenRun="") %}
                        {% set nsVariables = namespace(poll="WHEN ") %}

                        {# Task Info #}
                        {% set taskName = desiredState.node.name + '_TASK'  %}
                        {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 

                        {# Task Type #}
                        {%- if desiredState.config.schedulingMode == 'Warehouse Task' -%} 
                            {# Can be updated during deployment via a parameter to account for different warehouse names in different deployments #}
                            {% if desiredState.parameters.targetTaskWarehouse == 'DEV ENVIRONMENT' %}
                                {% set taskType = 'WAREHOUSE = ' + desiredState.config.whName %}
                            {% else %}
                                {% set taskType = 'WAREHOUSE = ' + desiredState.parameters.targetTaskWarehouse %}
                            {% endif %}
                        {%- else -%}
                            {%- set taskType = 'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = ' + desiredState.config.serverlessSize -%} 
                        {%- endif -%}

                        {# Schedule Type #}
                        {%- if desiredState.config.schedulePeriodOption == 'Minutes' -%} 
                            {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + desiredState.config.schedulePeriod + ' MINUTE' + "'" -%} 
                        {% elif desiredState.config.schedulePeriodOption == 'CRON' %}
                            {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + 'USING CRON ' + desiredState.config.scheduleCRON +"'" %}
                        {%- else -%}
                            {%- set nsVariables.taskWhenRun = 'AFTER ' -%}
                            {%- set predecessorTasks = (desiredState.config.predTask).split(",") -%}

                            {%- for p in predecessorTasks -%}
                                {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + targetTableDatabase + '.' + targetTableSchema + '.' + p -%}
                                {%- if not loop.last -%} 
                                    {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + ',' -%}
                                {%- endif %}
                            {% endfor %}    
                        {%- endif -%}

                        {# When Stream has data logic #}
                        {# Source Stream Location and Name #}
                        {% if desiredState.config.flagSrcStream == true %}
                            {% for source in desiredState.sources %}
                                {% for dep in source.dependencies %}
                                    {% if (dep.node.materializationType == 'stream') %}
                                        {% set streamStorageLocation = dep.node.location.name %}
                                        {% set streamSourceDatabase = desiredState.storageLocations | selectattr('name', 'equalto', streamStorageLocation) | map(attribute='database') | first %}
                                        {% set streamSourceSchema = desiredState.storageLocations | selectattr('name', 'equalto', streamStorageLocation) | map(attribute='schema') | first %}
                                        {% set streamSourceName = dep.node.name %}

                                        {%- if nsVariables.poll == 'WHEN ' -%}
                                            {% set nsVariables.poll = nsVariables.poll + 'SYSTEM$STREAM_HAS_DATA(\'"' + streamSourceDatabase + '"."'  + streamSourceSchema + '"."' + streamSourceName + '"\')'  %}
                                        {% else %}
                                            {% set nsVariables.poll = nsVariables.poll + desiredState.config.multiStreamBehavior + ' SYSTEM$STREAM_HAS_DATA(\'"' + streamSourceDatabase + '"."'  + streamSourceSchema + '"."' + streamSourceName + '"\')'  %}
                                        {%- endif -%}
                                    {%- endif -%}
                                {% endfor %}
                            {% endfor %}
                        {% endif -%}

                        {# To mimic truncate behavior #}
                        {% if desiredState.config.truncateBefore == true %}
                            {% set truncateBehavior = 'INSERT OVERWRITE' %}
                        {% else %}
                            {% set truncateBehavior = 'INSERT' %}
                        {% endif -%}

                        CREATE OR REPLACE TASK 
                            {{ fullyQualifiedTaskName }} 
                            {{ taskType}} 
                            {{ nsVariables.taskWhenRun }} 
                            {% if nsVariables.poll != 'WHEN ' %} {{ nsVariables.poll }} {% endif %}
                        AS 
                        {{ truncateBehavior }} INTO {{ fullyQualifiedTargetTableName }}
                            (
                                {% for col in desiredState.columns %}
                                    "{{ col.name }}"
                                    {%- if not loop.last -%},{% endif %}
                                {% endfor %}
                            )
                        
                            {% for source in desiredState.sources %}
                                /* Combine Sources if needed */
                                {% if loop.first %}
                                    SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                                    {% for col in desiredState.columns  %}
                                        "{{ col.name }}" AS "{{ col.name }}"
                                        {% if not loop.last %}, {% endif %}
                                    {% endfor %}
                                    FROM (
                                {% endif %}
                                SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                                {% for col in source.columns if not col.isSurrogateKey %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"{% if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }}                  
                                {% if not loop.last %}
                                    {{ desiredState.config.insertStrategy }}
                                {% endif %}
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                            {% if desiredState.config.groupByAll %}GROUP BY ALL{% endif %}
                            {{ sortorder_by_colv() }}

                        {%- if desiredState.config.schedulePeriodOption != 'Predecessor' -%} 
                            {{ stage('Resume Task', true, "sql", "alter") }}
                            ALTER TASK {{ fullyQualifiedTaskName }} RESUME;
                        {%- endif -%}

                    {% else %}
                        {{ stage('Development Mode - No Task.') }}
                        select 1 = 0
                    
                    {%- endif -%}

            {% elif currentState != undefined and desiredState == undefined %}

                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {% if currentState.config.devMode == false %}
                    {# FQ Root Task name #}
                    {% set fullyQualifiedRootTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + currentState.config.rootTask + '"'%}

                    {# Task Info #}
                    {% set taskName = currentState.node.name + '_TASK'  %}
                    {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 

                    {%- if currentState.config.schedulePeriodOption == 'Predecessor' -%} 
                    {{ stage('Suspend Root Task', true, "sql", "drop") }}
                        ALTER TASK IF EXISTS {{ fullyQualifiedRootTaskName }} SUSPEND
                    {{ stage('Drop Current Task', true, "sql", "drop") }}
                        DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
                    {%- else -%}
                    {{ stage('Drop Current Task', true, "sql", "drop") }}
                        DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
                    {%- endif -%}
                {%- endif -%}

            {%- else -%}

            {{ stage('No task edits.  Unknown state.') }}
            select 1 = 0

            {% endif %}
        run:
          templateString: |-
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Work With Task == #}
            {# == Node Type Description    : This node loads data into work table == #}

            {# Development mode -To test the SQL the task will execute to make sure it runs without errors and returns the expected data #}

            {% if config.devMode == true %}

                    {# To mimic truncate behavior #}
                    {% if config.truncateBefore == true %}
                        {% set truncateBehavior = 'INSERT OVERWRITE' %}
                    {% else %}
                        {% set truncateBehavior = 'INSERT' %}
                    {% endif -%}

                {{ stage('Insert Data') }}

                            {{ truncateBehavior }} INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                    
                        {% for source in sources %}
                            /* Combine Sources if needed */
                            {% if loop.first %}
                                SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                                {% for col in columns  %}
                                    "{{ col.name }}" AS "{{ col.name }}"
                                    {% if not loop.last %}, {% endif %}
                                {% endfor %}
                                FROM (
                            {% endif %}
                            SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {{ get_source_transform(col) }} AS "{{ col.name }}"{% if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }}
                            {% if not loop.last %}
                                {{ config.insertStrategy }}
                            {% endif %}
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {% if config.groupByAll %}GROUP BY ALL{% endif %}
                         {{sortorder_by_colv()}}
            {% endif -%}
    name: Work with Task
    version: 1
  StepType-152:
    id: "152"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |+
        capitalized: Stream and Insert or Merge
        short: SIM
        tagColor: black
        plural: Streams and Merges

        deployStrategy: advanced

        config:
        - groupName: General Options
          items:
          - displayName: Development Mode
            attributeName: devMode
            type: toggleButton
            isRequired: true
            default: true

          - type: toggleButton
            attributeName: selectDistinct
            displayName: Distinct
            default: false
            enableIf: "{% if config.groupByAll %} false {% else %} true {% endif %}"

          - type: toggleButton
            attributeName: groupByAll
            displayName: Group By All
            enableIf: "{% if config.selectDistinct %} false {% else %} true {% endif %}"
            default: false


        - groupName: Stream Options
          items:
          - displayName: Source Object
            attributeName: sourceType
            type: dropdownSelector
            default: Table
            options:
              - Table
              - External Table
              - View
            isRequired: true

          - displayName: Append Only Stream
            attributeName: appendOnly
            type: toggleButton
            default: false
            isRequired: true
            enableIf: "{% if config.sourceType == 'Table' or config.sourceType == 'View' %} true {% else %} false {% endif %}"

          - displayName: Show Initial Rows
            attributeName: initialRows
            type: toggleButton
            default: true
            isRequired: true
            enableIf: "{% if config.sourceType == 'Table' or config.sourceType == 'View' %} true {% else %} false {% endif %}"


          - displayName: Redeployment Behavior
            attributeName: redeploymentBehavior
            type: dropdownSelector
            default: Create At Existing Stream
            options:
              - Create or Replace
              - Create If Not Exists
              - Create At Existing Stream
            isRequired: true

        - groupName: Target Loading Options
          items:
          - displayName: Load Type
            attributeName: loadType
            type: dropdownSelector
            default: Insert
            options:
              - Insert
              - Merge
            isRequired: true

          - type: tabular 
            displayName: 'Table Key(s)'
            attributeName: partitionBy
            columns:
          
            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: partColName
               isRequired: false
                
            isRequired: false
            enableIf: "{% if config.loadType == 'Merge' %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Record Date / Timestamp'
            attributeName: orderBy
            columns:
          
            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: colName
               isRequired: false
            
            -  type: dropdownSelector
               displayName: Sort Order
               attributeName: sortOrd
               default: desc
               options:
               - desc
               - asc
               isRequired: false
            
            isRequired: false
            enableIf: "{% if config.loadType == 'Merge' %} true {% else %} false {% endif %}"
         
          # Cluster Key-Determine if a node is to be clustered or not #
          
          - type: toggleButton
            attributeName: clusterKey
            displayName: Cluster Key
            default: false
            isRequired: true

          - type: toggleButton
            attributeName: clusterKeyExpressions
            displayName: Allow Expressions in Cluster Key
            default: false
            isRequired: true
            enableIf: "{% if config.clusterKey %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfig
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnName
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and not config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Cluster Key'
            attributeName: clusterKeyConfigExpressions
            columns:

            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: columnNameExpressions
               isRequired: false
          
            -  type: textBox
               displayName: Expression
               attributeName: sqlExpression
               default: "ex. trunc(<column_name>, -5)"
               isRequired: false
          
            isRequired: false
            enableIf: "{% if (config.clusterKey and config.clusterKeyExpressions) %} true {% else %} false {% endif %}"

        - groupName: Scheduling Options

        # Schedule mode-Specifies whether a warehouse or serverless compute is used to run the task #

          enableIf: "{% if config.devMode == true %} false {% else %} true {% endif %}" 
          items:
          - displayName: Scheduling Mode
            attributeName: schedulingMode
            type: dropdownSelector
            default: Warehouse Task
            options:
              - Warehouse Task
              - Serverless Task
            isRequired: true

        # Checks whether source streams have data before executing a task #

          - displayName: When Source Stream has Data Flag
            attributeName: flagSrcStream
            type: toggleButton
            default: true
            isRequired: true

        # Warehouse name  you want the task to run #

          - displayName: Select Warehouse on which to run task
            attributeName: whName
            type: textBox
            default: '<WAREHOUSE_NAME>'
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Warehouse Task' %} true {% else %} false {% endif %}"

          - displayName: Select initial serverless Warehouse size
            attributeName: serverlessSize
            type: dropdownSelector
            default: 'MEDIUM'
            options:
              - XSMALL
              - SMALL
              - MEDIUM
              - LARGE
              - XLARGE
              - XXLARGE
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Serverless Task' %} true {% else %} false {% endif %}"

        # Way to schedule the task to run #

          - displayName: Task Schedule
            attributeName: schedulePeriodOption
            type: dropdownSelector
            default: Predecessor
            options:
              - Minutes
              - CRON
              - Predecessor
            isRequired: true

          - displayName: Enter task schedule using minutes
            attributeName: schedulePeriod
            type: textBox
            default: '60'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Minutes' %} true {% else %} false {% endif %}"

          - displayName: Enter task schedule using CRON
            attributeName: scheduleCRON
            type: textBox
            default: '5 0-23 * * * America/Los_Angeles'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'CRON' %} true {% else %} false {% endif %}"

          - displayName: Enter predecessor task(s) separated by a comma
            attributeName: predTask
            type: textBox
            default: 'DATA_TRANSFORMATION_ROOT_TASK'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

          - displayName: Enter root task name
            attributeName: rootTask
            type: textBox
            default: 'DATA_TRANSFORMATION_ROOT_TASK'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

        - groupName: Hidden Config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: task
            options:
            - task
            isRequired: false

      templates:
        create:
          templateString: |+
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Stream and Insert or Merge == #}
            {# == Node Type Description    : This node creates and deploys a stream on top of a table, view or external table.Also provides option to create a target table to insert or merge data from source with a task on top of it.
            == #}

            {# Create Stream First #}
            {% if desiredState %}

                {# Source Object Location and Name #}
                {% set sourceStorageLocation = desiredState.sources[0].dependencies[0].node.location.name %}
                {% set sourceDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='database') | first %}
                {% set sourceSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='schema') | first %}
                {% set sourceTableName = desiredState.sources[0].dependencies[0].node.name %}
                {% set fullyQualifiedSourceTableName = '"' + sourceDatabaseName + '"."' + sourceSchemaName + '"."' + sourceTableName + '"' %}
                {% set refLink = "{{ ref('" + sourceStorageLocation + "', '" + sourceTableName + "') }}" %}

                {# Target Stream Location and Name #}
                {% set streamTargetLocationName = desiredState.node.location.name %}
                {% set streamTargetDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
                {% set streamTargetSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
                {% set streamName = desiredState.node.name + '_STREAM' %}
                {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}

                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}
                {% set targetTableName = desiredState.node.name %}

                {# Stream Type #}
                {% if desiredState.config.sourceType == 'Table' %} 
                    {% set streamType = 'TABLE' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% elif desiredState.config.sourceType == 'External Table' %} 
                    {% set streamType = 'EXTERNAL TABLE' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% elif desiredState.config.sourceType == 'Directory Table' %} 
                    {% set streamType = 'STAGE' %}
                    {% set streamSourceObjectName = desiredState.config.stageName %}
                {% else %} 
                    {% set streamType = 'VIEW' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% endif %}

                {# Stream Append Behavior #}
                {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                    {% if desiredState.config.appendOnly == true %} 
                        {% set streamAppendMode = 'APPEND_ONLY = TRUE' %}
                    {% else %} 
                        {% set streamAppendMode = 'APPEND_ONLY = FALSE' %}
                    {% endif %}
                {% else %}
                    {% set streamAppendMode = '' %}
                {% endif %}

                {# Stream Initial Row Behavior #}
                {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                    {% if desiredState.config.initialRows == true %} 
                        {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = TRUE' %}
                    {% else %} 
                        {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = FALSE' %}
                    {% endif %}
                {% else %}
                    {% set streamInitialRowsMode = '' %}
                {% endif %}

                {# Stream Insert Only Behavior #}
                {% if streamType == 'EXTERNAL TABLE' %} 
                    {% if desiredState.config.insertOnly == true %} 
                        {% set streamInsertOnlyMode = 'INSERT_ONLY = TRUE' %}
                    {% else %} 
                        {% set streamInsertOnlyMode = 'INSERT_ONLY = FALSE' %}
                    {% endif %}
                {% else %}
                    {% set streamInsertOnlyMode = '' %}
                {% endif %}
            {% endif %}

            {# Create Stream first #}
            {% if desiredState or desiredState == currentState %}

                {% if currentState == undefined or desiredState.config.redeploymentBehavior == 'Create or Replace' %}
                    {{ stage('Create Stream', true, "sql", "alter") }}
                    CREATE OR REPLACE STREAM {{ fullyQualifiedStreamName }}
                        ON {{ streamType }} {{ refLink }}
                        {{ streamAppendMode }}
                        {{ streamInitialRowsMode }}
                        {{ streamInsertOnlyMode }}

                {% elif currentState != undefined and desiredState.config.redeploymentBehavior == 'Create If Not Exists'%}
                    {{ stage('Create Stream If Not Exists', true, "sql", "alter") }}
                    CREATE STREAM IF NOT EXISTS {{ fullyQualifiedStreamName }}
                        ON {{ streamType }} {{ refLink }}
                        {{ streamAppendMode }}
                        {{ streamInitialRowsMode }}
                        {{ streamInsertOnlyMode }}

                {% elif currentState != undefined and desiredState.config.redeploymentBehavior == 'Create At Existing Stream'%}
                    {{ stage('Re-Create Stream at existing offset', true, "sql", "alter") }}
                    CREATE OR REPLACE STREAM {{ fullyQualifiedStreamName }}
                        ON {{ streamType }} {{ refLink }}
                        AT(STREAM => '{{ fullyQualifiedStreamName }}');

                {% else %}
                    {{ stage('Unknown state.', true, "sql", "alter") }}
                    select 1 = 0
                {% endif %}


            {% elif desiredState == undefined %}

                {# Source Stream Location and Name #}
                {% set streamTargetLocationName = currentState.node.location.name %}
                {% set streamTargetDatabaseName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
                {% set streamTargetSchemaName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
                {% set streamName = currentState.node.name + '_STREAM' %}
                {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}

                {{ stage('Drop Stream', true, "sql", "drop") }}
                DROP STREAM IF EXISTS {{ fullyQualifiedStreamName }}

            {%- else -%}

                {{ stage('Unknown state.  Nothing to do.') }}
                select 1 = 0

            {% endif %}

            {# Create / Alter Table Second #}
            {% if desiredState == currentState %}

                {{ stage('No table edits.') }}
                select 1 = 0

            {% elif desiredState %}

                {% if currentState == undefined %}
                    {# Figure out cluster key #}
                    {% set nsVariables = namespace(finalClusterKey="") %}
                    {% if desiredState.config.clusterKey == true %}
                        {% if desiredState.config.clusterKeyExpressions == true %}
                            {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% if expression[loop.index0] == "" %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% else %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                {% endif %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% else %}

                            {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% endif %}
                    {% endif %}

                    {{ stage('Create Stage Table', true, "sql", "create") }}
                    CREATE OR REPLACE TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                    (
                        {% for col in desiredState.columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}

                    {% if desiredState.config.clusterKey == true %}
                        {{ stage('Apply Table Clustering', true, "sql", "create") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} {{ nsVariables.finalClusterKey }}

                        {{ stage('Resume Recluster Table', true, "sql", "create") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} RESUME RECLUSTER
                    {% endif %}

                {% elif currentState != undefined %}

                    {# Change Node Name or Change Storage Location #}
                    {# Storage Location Tests #}
                    {# Only need to account for updated Storage Location mappings   #}
                    {# Current Namespace Varialbes #}
                    {% set nsVariables = namespace(nsCurrentDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsCurrentUsedStorageLocations="") %}

                    {# Current State Storage Location Info #}
                    {% for source in currentState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsCurrentDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nsCurrentDepStorageLocations = nsVariables.nsCurrentDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsCurrentSourceStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsCurrentTargetStorageLocations = currentState.node.location.name  %}

                    {% set nsVariables.nsCurrentUsedStorageLocations = nsVariables.nsCurrentSourceStorageLocations + ',' + nsVariables.nsCurrentTargetStorageLocations %}

                    {% set currentStorageLocations = (nsVariables.nsCurrentUsedStorageLocations).split(',') | list %}
                    {% set currentUniqueStorageLocations = currentStorageLocations | unique | sort | list %}

                    {# Desired Namespace Variables #}
                    {% set nsVariables = namespace(nsDesiredDepStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredSourceStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredTargetStorageLocations="") %}
                    {% set nsVariables = namespace(nsDesiredUsedStorageLocations="") %}

                    {% set nsVariables = namespace(storageLocationTest="") %}

                    {# Desired State Storage Location Info #}
                    {% for source in desiredState.sources %}
                        {% for dep in source.dependencies %}
                            {% set depSourceLocation = dep.node.location.name %}
                            {% if loop.first %}
                                {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                            {% else %}
                                {% set nsVariables.nnsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                            {% endif %}
                        {% endfor %}
                        
                        {% if loop.first %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
                        {% else %}
                            {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

                    {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

                    {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
                    {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}

                    {# Test  #}
                    {% set nsVariables.storageLocationTest = true %}
                    {% set nodeCommentTest = currentState.node.description == desiredState.node.description %}

                    {% for name in desiredUniqueStorageLocations if nsVariables.storageLocationTest == true %}
                        {# Current mappings #}
                        {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
                        
                        {# Desired mappings #}
                        {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                        {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                        {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}

                        {% if currentDatabaseSchema != desiredDatabaseSchema %}
                            {% set nsVariables.storageLocationTest = false %}
                        {% endif %}
                    {% endfor %}

                    {# Clustering Test #}
                    {% set clusterKeyTest = currentState.config.clusterKey == desiredState.config.clusterKey %}
                    {% set clusterKeyExpressionsTest = currentState.config.clusterKeyExpressions == desiredState.config.clusterKeyExpressions %}
                    {% set clusterKeyConfigTest = currentState.config.clusterKeyConfig == desiredState.config.clusterKeyConfig %}
                    {% set clusterKeyConfigExpressionsTest = currentState.config.clusterKeyConfigExpressions == desiredState.config.clusterKeyConfigExpressions %}

                    {% if 
                        clusterKeyTest == false or
                        clusterKeyExpressionsTest == false or
                        clusterKeyConfigTest == false or
                        clusterKeyConfigExpressionsTest == false %}

                        {% set clusterTest = false %}
                    {% else %}
                        {% set clusterTest = true %}
                    {% endif %}

                    {# Rename / Move Object #}
                    {% if (nsVariables.storageLocationTest == false or currentState.node.name != desiredState.node.name) %}
                        {{ stage('Rename and / or Move Table', true, "sql", "alter") }}
                        ALTER TABLE {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                        RENAME TO   {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                    {% endif %}

                    {# Change table description #}
                    {% if (nsVariables.nodeCommentTest == false or currentState.node.description != desiredState.node.description) %}
                        {{ stage('Change table description', true, "sql", "alter") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        SET COMMENT = '{{ desiredState.node.description | escape }}'
                    {% endif %}

                    {# Drop Columns #}
                    {% set nsVariables = namespace(colchanges=0) %}
                    {% for dropCurCol in currentState.columns %}
                        {% if dropCurCol.id not in desiredState.columns | map(attribute="id") %}
                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                            {% if nsVariables.colchanges == 1 %}
                                {{ stage('Drop Columns', true, "sql", "alter") }}
                                ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                DROP COLUMN 
                            {% else %}
                                , 
                            {% endif %}
                            "{{ dropCurCol.name }}"
                        {% endif %}
                    {% endfor %}

                    {# Add Columns #}
                    {% set nsVariables = namespace(colchanges=0) %}
                    {% for addDesCol in desiredState.columns %}
                        {% if addDesCol.id not in currentState.columns | map(attribute="id") %}
                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                            {% if nsVariables.colchanges == 1 %}
                                {{ stage('Add Columns', true, "sql", "alter") }}
                                ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                ADD COLUMN
                            {% else %}
                                ,
                            {% endif %}
                                "{{ addDesCol.name }}" {{ addDesCol.dataType }}
                                {%- if not addDesCol.nullable %} NOT NULL
                                    {%- if addDesCol.defaultValue | length > 0 %} DEFAULT {{ addDesCol.defaultValue }}{% endif %}
                                {% endif %}
                                {%- if addDesCol.description | length > 0 %} COMMENT '{{ addDescol.description | escape }}'{% endif %}
                        {% endif %}
                    {% endfor %}

                    {# Rename Columns #}
                    {% for renameCurCol in currentState.columns %}
                        {% if renameCurCol.id in desiredState.columns | map(attribute="id") %}
                            {% set desiredColumnName = desiredState.columns | selectattr('id', 'equalto', renameCurCol.id) | map(attribute='name') | first %}
                            {% if renameCurCol.name != desiredColumnName %}
                                {{ stage('Rename Column ' + renameCurCol.name, true, "sql", "alter") }}
                                ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                RENAME COLUMN "{{ renameCurCol.name }}"
                                TO "{{ desiredColumnName }}"
                            {% endif %}
                        {% endif %}
                    {% endfor %}

                    {# Change data types or other column level chnages #}
                    
                    {% set nsVariables.colchanges = 0 %}
                    {% for alterCurCol in currentState.columns %}        
                        {% if alterCurCol.id in desiredState.columns | map(attribute="id") %}
                            {% set currentDatatype = alterCurCol.dataType %}
                            {% set currentNullable = alterCurCol.nullable %}
                            {% set currentDefaultValue = alterCurCol.defaultValue %}
                            {% set currentDescription = alterCurCol.description %}

                            {% set desiredColumnName = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='name') | first %}
                            {% set desiredDatatype = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='dataType') | first %}
                            {% set desiredNullable = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='nullable') | first %}
                            {% set desiredDefaultValue = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='defaultValue') | first %}
                            {% set desiredDescription = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='description') | first %}

                            {% set datatypeTest = currentDatatype == desiredDatatype %}
                            {% set nullableTest = currentNullable == desiredNullable %}
                            {% set defaultValueTest = currentDefaultValue == desiredDefaultValue %}
                            {% set descriptionTest = currentDescription == desiredDescription %}

                            {% if (datatypeTest == false or 
                                    nullableTest == false  or
                                    defaultValueTest == false or
                                    descriptionTest == false) %}
                                {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                                {% if nsVariables.colchanges == 1 %}
                                    {{ stage('Change Column Attributes', true, "sql", "alter") }}
                                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                                    MODIFY
                                {% endif %}
                                {% if datatypeTest == false %}
                                    {% if nsVariables.colchanges > 1 %},{% endif %}
                                    COLUMN "{{ desiredColumnName }}"
                                    SET DATA TYPE {{ desiredDatatype }}
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                {% endif %}
                                {% if nullableTest == false %}
                                    {% if nsVariables.colchanges > 1 %},{% endif %}
                                    COLUMN "{{ desiredColumnName }}"
                                    {% if currentNullable == true %}
                                        SET
                                    {% else %}
                                        DROP
                                    {% endif %}
                                    NOT NULL
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                {% endif %}
                                {% if descriptionTest == false %}
                                    {% if nsVariables.colchanges > 1 %},{% endif %}
                                    COLUMN "{{ desiredColumnName }}"
                                    COMMENT '{{ desiredDescription }}'
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                {% endif %}
                                {% if defaultValueTest == false %}
                                    {% if nsVariables.colchanges > 1 %},{% endif %}
                                    COLUMN "{{ desiredColumnName }}"
                                    {% if desiredDefaultValue == '' %}
                                        DROP DEFAULT
                                    {% else %}
                                        SET DEFAULT {{ desiredDefaultValue }}
                                    {% endif %}
                                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                                {% endif %}
                                
                            {% else %}
                                                    
                            {% endif %}
                        {% endif %}
                    {% endfor %}

                    {# Figure out cluster key #}
                    {% set nsVariables = namespace(finalClusterKey="") %}
                    {% if clusterTest == false %}
                        {% if desiredState.config.clusterKeyExpressions == true %}
                            {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% if expression[loop.index0] == "" %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                                {% else %}
                                    {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                                {% endif %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                        {% elif desiredState.config.clusterKey == true %}

                            {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                            {%- set nsVariables = namespace(clusterValues=[]) %}

                            {% for r in column %}
                                {% set nsVariables.clusterValues = nsVariables.clusterValues + [r] %}
                            {% endfor %}

                            {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}
                        
                        {% else %}

                            {% set nsVariables.finalClusterKey = 'DROP CLUSTERING KEY' %}

                        {% endif %}

                        {{ stage('Recluster TABLE', true, "sql", "create") }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        {{ nsVariables.finalClusterKey }}

                    {% endif %}
                {% endif %}


            {% elif currentState != undefined and desiredState == undefined %}

                {# Table or View Name #}
                {% set targetObjectDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetObjectSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetObjectName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {{ stage('Drop Table', true, "sql", "drop") }}
                DROP TABLE IF EXISTS {{ fullyQualifiedTargetObjectName }}

            {%- else -%}

            {{ stage('No table edits.  Unknown state.') }}
            select 1 = 0

            {% endif %}

            {# Create Task Third #}
            {% if desiredState == currentState %}

                {{ stage('No task edits.') }}
                select 1 = 0

            {% elif desiredState %}

                    {% if desiredState.config.devMode == false %}
                        {%- if desiredState.config.schedulePeriodOption == 'Predecessor' -%} 
                            {%- set fullyQualifiedRootTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + desiredState.config.rootTask + '"' -%} 
                            {{ stage('Suspend Root Task', true, "sql", "alter") }}
                            ALTER TASK {{ fullyQualifiedRootTaskName }} SUSPEND
                        {%- endif -%}

                        {# Set Namespace Variables #}
                        {% set nsVariables = namespace(taskWhenRun="") %}
                        {% set nsVariables = namespace(poll="WHEN ") %}

                        {# Task Info #}
                        {% set taskName = desiredState.node.name + '_TASK'  %}
                        {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 

                        {# Task Type #}
                        {%- if desiredState.config.schedulingMode == 'Warehouse Task' -%} 
                            {# Can be updated during deployment via a parameter to account for different warehouse names in different deployments #}
                            {% if desiredState.parameters.targetTaskWarehouse == 'DEV ENVIRONMENT' %}
                                {% set taskType = 'WAREHOUSE = ' + desiredState.config.whName %}
                            {% else %}
                                {% set taskType = 'WAREHOUSE = ' + desiredState.parameters.targetTaskWarehouse %}
                            {% endif %}
                        {%- else -%}
                            {%- set taskType = 'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = ' + desiredState.config.serverlessSize -%} 
                        {%- endif -%}

                        {# Schedule Type #}
                        {%- if desiredState.config.schedulePeriodOption == 'Minutes' -%} 
                            {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + desiredState.config.schedulePeriod + ' MINUTE' + "'" -%} 
                        {% elif desiredState.config.schedulePeriodOption == 'CRON' %}
                            {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + 'USING CRON ' + desiredState.config.scheduleCRON + "'" %}
                        {%- else -%}
                            {%- set nsVariables.taskWhenRun = 'AFTER ' -%}
                            {%- set predecessorTasks = (desiredState.config.predTask).split(",") -%}

                            {%- for p in predecessorTasks -%}
                                {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + targetTableDatabase + '.' + targetTableSchema + '.' + p -%}
                                {%- if not loop.last -%} 
                                    {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + ',' -%}
                                {%- endif %}
                            {% endfor %}    
                        {%- endif -%}

                        {# When Stream has data logic #}
                        {# Source Stream Location and Name #}
                        {% if desiredState.config.flagSrcStream == true %}
                            {%- if nsVariables.poll == 'WHEN ' -%}
                                {% set nsVariables.poll = nsVariables.poll + 'SYSTEM$STREAM_HAS_DATA (\'' + fullyQualifiedStreamName + '\')'  %}
                            {%- endif -%}
                        {% endif -%}

                        {% set tableColumnIds = desiredState.columns | map(attribute='id') | list %}
                        {% set tableColumnNames = desiredState.columns | map(attribute='name') | list %}

                        {# Merge partition by and order by #}
                        {%- if desiredState.config.loadType == 'Merge' -%} 
                            {% set tableColumnNamesUpdate = tableColumnNames | reject('in', desiredState.config.partitionBy.get('items') | map(attribute='partColName.name')) | list %}
                            
                            {% for i in desiredState.config.partitionBy.get('items') %}
                                {%- if loop.first -%}
                                    {% set nsVariables.partition = '"' + i.partColName.name + '"' %}
                                {% else %}
                                    {% set nsVariables.partition = nsVariables.partition + ', "' + i.partColName.name + '"' %}
                                {%- endif -%}

                                {% set tableColumnNamesUpdate = tableColumnNames | reject('in', i.partColName.name) | list %}

                            {% endfor %}

                            {% for i in desiredState.config.orderBy.get('items') %}
                                {%- if loop.first -%}
                                    {% set nsVariables.orderBy = '"' + i.colName.name + '" ' + i.sortOrd %}
                                {% else %}
                                    {% set nsVariables.orderBy = nsVariables.orderBy + ', "' + i.colName.name + '" ' + i.sortOrd %}
                                {%- endif -%}
                            {% endfor %}
                            {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}

                            {%- set nsVariables.tableKey = desiredState.config.partitionBy.get('items') %}
                            {% set nsVariables.tableKey = nsVariables.tableKey | map(attribute='partColName.name') | list %}
                        {%- endif -%}

                        {{ stage('Create Task', true, "sql", "alter") }}
                        CREATE OR REPLACE TASK 
                            {{ fullyQualifiedTaskName }} 
                            {{ taskType}} 
                            {{ nsVariables.taskWhenRun }} 
                            {% if nsVariables.poll != 'WHEN ' %} {{ nsVariables.poll }} {% endif %}
                        AS 
                    {% if desiredState.config.loadType == 'Insert' -%} 
                        INSERT INTO {{ fullyQualifiedTargetTableName }}
                        SELECT  {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                                 {% for id in tableColumnIds %}
                                {% set col = desiredState.sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='name') | first -%}
                                {% set columnTransformation = desiredState.sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='transform') | first -%}
                                {%- if columnTransformation == "" -%}
                                "{{ col }}" as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                                {%- else -%}
                                {{ columnTransformation | replace(sourceTableName, streamName) }} as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                                {%- endif %}
                            {%- endfor %}               
                        FROM {{ fullyQualifiedStreamName }}
                        {% if desiredState.config.groupByAll %}GROUP BY ALL{% endif %}
                        {% else -%}
                        MERGE INTO {{ fullyQualifiedTargetTableName }} tgt USING
                        -- Select Statement Preparing Data for Merge
                        (SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                                {% for id in tableColumnIds %}
                                {% set col = desiredState.sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='name') | first -%}
                                {% set columnTransformation = desiredState.sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='transform') | first -%}
                                {%- if columnTransformation == "" -%}
                                "{{ col }}" as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                                {%- else -%}
                                {{ columnTransformation | replace(sourceTableName, streamName) }} as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                                {%- endif %}
                            {%- endfor %}
                        FROM {{ fullyQualifiedStreamName }}
                        {% if desiredState.config.groupByAll %}GROUP BY ALL{% endif %}
                        QUALIFY {{ nsVariables.rowNumber }} = 1) src
                        
                        -- Join Condition
                        ON {% for col in nsVariables.tableKey -%}
                            src."{{ col }}" = tgt."{{ col }}"
                        {% if not loop.last %} AND {% endif %}
                            {%- endfor -%}
                        
                        -- What to do if data is matched based on table key
                        WHEN MATCHED THEN UPDATE SET 
                            {%- for col in tableColumnNamesUpdate %}
                                    tgt."{{ col }}" = src."{{ col }}"
                                    {%- if not loop.last -%}, {%- endif %}
                            {%- endfor %}
                        -- What to do with new records based on table key
                        WHEN NOT MATCHED THEN INSERT 
                            (
                            {%- for col in desiredState.columns -%}
                                    "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                            {% endfor %}) 
                        VALUES (
                            {%- for col in desiredState.columns -%}
                                    src."{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                            {% endfor %})
                        {%- endif -%}

                        {%- if desiredState.config.schedulePeriodOption != 'Predecessor' -%} 
                            {{ stage('Resume Task', true, "sql", "alter") }}
                            ALTER TASK {{ fullyQualifiedTaskName }} RESUME;
                        {%- endif -%}

                    {% else %}
                        {{ stage('Development Mode - No Task.') }}
                        select 1 = 0
                        
                    {%- endif -%}

            {% elif currentState != undefined and desiredState == undefined %}

                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {% if currentState.config.devMode == false %}
                    {# FQ Root Task name #}
                    {% set fullyQualifiedRootTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + currentState.config.rootTask + '"'%}

                    {# Task Info #}
                    {% set taskName = currentState.node.name + '_TASK'  %}
                    {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 

                    {%- if currentState.config.schedulePeriodOption == 'Predecessor' -%} 
                    {{ stage('Suspend Root Task', true, "sql", "drop") }}
                        ALTER TASK IF EXISTS {{ fullyQualifiedRootTaskName }} SUSPEND
                    {{ stage('Drop Current Task', true, "sql", "drop") }}
                        DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
                    {%- else -%}
                    {{ stage('Drop Current Task', true, "sql", "drop") }}
                        DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
                    {%- endif -%}
                {%- endif -%}

            {%- else -%}

                {{ stage('Nothing to do.') }}
                select 1 = 0

            {% endif %}

        run:
          templateString: |-
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Stream and Insert or Merge == #}
            {# == Node Type Description    : This node inserts/merge data into target table == #}

            {# Development mode -To test the SQL the task will execute to make sure it runs without errors and returns the expected data #}

            {% if config.devMode == true %}

                {% set nsVariables = namespace() %}

                {# Target Stream Location and Name #}
                {% set streamTargetLocationName = node.location.name %}
                {% set streamTargetDatabaseName = storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
                {% set streamTargetSchemaName = storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
                {% set streamName = node.name + '_STREAM' %}
                {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}

                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(node.location.name, node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(node.location.name, node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(node.location.name, node.name) %}
                {% set targetTableName = node.name %}

                {% set tableColumnIds = columns | map(attribute='id') | list %}
                {% set tableColumnNames = columns | map(attribute='name') | list %}

                {# Merge partition by and order by #}
                {%- if config.loadType == 'Merge' -%} 
                    {% set tableColumnNamesUpdate = tableColumnNames | reject('in', config.partitionBy.get('items') | map(attribute='partColName.name')) | list %}
                    
                    {% for i in config.partitionBy.get('items') %}
                        {%- if loop.first -%}
                            {% set nsVariables.partition = '"' + i.partColName.name + '"' %}
                        {% else %}
                            {% set nsVariables.partition = nsVariables.partition + ', "' + i.partColName.name + '"' %}
                        {%- endif -%}

                        {% set tableColumnNamesUpdate = tableColumnNames | reject('in', i.partColName.name) | list %}

                    {% endfor %}

                    {% for i in config.orderBy.get('items') %}
                        {%- if loop.first -%}
                            {% set nsVariables.orderBy = '"' + i.colName.name + '" ' + i.sortOrd %}
                        {% else %}
                            {% set nsVariables.orderBy = nsVariables.orderBy + ', "' + i.colName.name + '" ' + i.sortOrd %}
                        {%- endif -%}
                    {% endfor %}
                    {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}

                    {%- set nsVariables.tableKey = config.partitionBy.get('items') %}
                    {% set nsVariables.tableKey = nsVariables.tableKey | map(attribute='partColName.name') | list %}
                {%- endif -%}

                {# Merge partition by and order by #}
                {%- if config.loadType == 'Merge' -%} 
                    {% set tableColumnNamesUpdate = tableColumnNames | reject('in', config.partitionBy.get('items') | map(attribute='partColName.name')) | list %}
                    
                    {% for i in config.partitionBy.get('items') %}
                        {%- if loop.first -%}
                            {% set nsVariables.partition = '"' + i.partColName.name + '"' %}
                        {% else %}
                            {% set nsVariables.partition = nsVariables.partition + ', "' + i.partColName.name + '"' %}
                        {%- endif -%}

                        {% set tableColumnNamesUpdate = tableColumnNames | reject('in', i.partColName.name) | list %}

                    {% endfor %}

                    {% for i in config.orderBy.get('items') %}
                        {%- if loop.first -%}
                            {% set nsVariables.orderBy = '"' + i.colName.name + '" ' + i.sortOrd %}
                        {% else %}
                            {% set nsVariables.orderBy = nsVariables.orderBy + ', "' + i.colName.name + '" ' + i.sortOrd %}
                        {%- endif -%}
                    {% endfor %}
                    {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}

                    {%- set nsVariables.tableKey = config.partitionBy.get('items') %}
                    {% set nsVariables.tableKey = nsVariables.tableKey | map(attribute='partColName.name') | list %}
                {%- endif -%}

                {{ stage('Insert or Merge Data') }}

                    {% if config.loadType == 'Insert' -%} 
                        INSERT INTO {{ fullyQualifiedTargetTableName }}
                        SELECT  {% if config.selectDistinct %} DISTINCT {% endif %}
                                {% for id in tableColumnIds %}
                                {% set col = sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='name') | first -%}
                                {% set columnTransformation = sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='transform') | first -%}
                                {%- if columnTransformation == "" -%}
                                "{{ col }}" as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                                {%- else -%}
                                {{ columnTransformation | replace(sourceTableName, streamName) }} as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                                {%- endif %}
                            {%- endfor %}
                        FROM {{ fullyQualifiedStreamName }}
                        {% if config.groupByAll %}GROUP BY ALL{% endif %}
                        {% else -%}
                        MERGE INTO {{ fullyQualifiedTargetTableName }} tgt USING
                        -- Select Statement Preparing Data for Merge
                        (SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                                {% for id in tableColumnIds %}
                                {% set col = sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='name') | first -%}
                                {% set columnTransformation = sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='transform') | first -%}
                                {%- if columnTransformation == "" -%}
                                "{{ col }}" as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                                {%- else -%}
                                {{ columnTransformation | replace(sourceTableName, streamName) }} as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                                {%- endif %}
                            {%- endfor %}
                        FROM {{ fullyQualifiedStreamName }}
                        {% if config.groupByAll %}GROUP BY ALL{% endif %}
                        QUALIFY {{ nsVariables.rowNumber }} = 1) src
                         
                        -- Join Condition
                        ON {% for col in nsVariables.tableKey -%}
                            src."{{ col }}" = tgt."{{ col }}"
                        {% if not loop.last %} AND {% endif %}
                            {%- endfor -%}
                       
                        -- What to do if data is matched based on table key
                        WHEN MATCHED THEN UPDATE SET 
                            {%- for col in tableColumnNamesUpdate %}
                                    tgt."{{ col }}" = src."{{ col }}"
                                    {%- if not loop.last -%}, {%- endif %}
                            {%- endfor %}
                        -- What to do with new records based on table key
                        WHEN NOT MATCHED THEN INSERT 
                            (
                            {%- for col in columns -%}
                                    "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                            {% endfor %}) 
                        VALUES (
                            {%- for col in columns -%}
                                    src."{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                            {% endfor %})
                        {%- endif -%}

            {% endif -%}
    name: Stream and Insert or Merge
    version: 1
  StepType-153:
    id: "153"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Stream
        short: STREAM
        tagColor: "#808B96"
        plural: Streams

        deployStrategy: advanced

        config:
        - groupName: Stream Options
          items:
          - displayName: Source Object
            attributeName: sourceType
            type: dropdownSelector
            default: Table
            options:
              - Table
              - External Table
              - View
            isRequired: true

          - displayName: Append Only Stream
            attributeName: appendOnly
            type: toggleButton
            default: false
            isRequired: true
            enableIf: "{% if config.sourceType == 'Table' or config.sourceType == 'View' %} true {% else %} false {% endif %}"

          - displayName: Show Initial Rows
            attributeName: initialRows
            type: toggleButton
            default: true
            isRequired: true
            enableIf: "{% if config.sourceType == 'Table' or config.sourceType == 'View' %} true {% else %} false {% endif %}"

          - displayName: Redeployment Behavior
            attributeName: redeploymentBehavior
            type: dropdownSelector
            default: Create At Existing Stream
            options:
              - Create or Replace
              - Create If Not Exists
              - Create At Existing Stream
            isRequired: true

        - groupName: Hidden Config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: stream
            options:
            - stream
            isRequired: false

        systemColumns:
        - displayName: METADATA$ACTION
          transform: ''
          dataType: STRING
          placement: end
          attributeName: metadataAction

        - displayName: METADATA$ISUPDATE
          transform: ''
          dataType: boolean
          placement: end
          attributeName: metadataIsUpdate

        - displayName: METADATA$ROW_ID
          transform: ''
          dataType: STRING
          placement: end
          attributeName: metadataRowID
      templates:
        create:
          templateString: |+
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Stream == #}
            {# == Node Type Description    : This node creates and deploys a stream on top of a table, view or external table.
            == #}

            {% if desiredState %}

                {# Source Object Location and Name #}
                {% set sourceStorageLocation = desiredState.sources[0].dependencies[0].node.location.name %}
                {% set sourceDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='database') | first %}
                {% set sourceSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='schema') | first %}
                {% set sourceTableName = desiredState.sources[0].dependencies[0].node.name %}
                {% set fullyQualifiedSourceTableName = '"' + sourceDatabaseName + '"."' + sourceSchemaName + '"."' + sourceTableName + '"' %}
                {% set refLink = "{{ ref('" + sourceStorageLocation + "', '" + sourceTableName + "') }}" %}

                {# Target Stream Location and Name #}
                {% set streamTargetLocationName = desiredState.node.location.name %}
                {% set streamTargetDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
                {% set streamTargetSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
                {% set streamName = desiredState.node.name %}
                {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}

                {# Stream Type #}
                {% if desiredState.config.sourceType == 'Table' %} 
                    {% set streamType = 'TABLE' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% elif desiredState.config.sourceType == 'External Table' %} 
                    {% set streamType = 'EXTERNAL TABLE' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% elif desiredState.config.sourceType == 'Directory Table' %} 
                    {% set streamType = 'STAGE' %}
                    {% set streamSourceObjectName = desiredState.config.stageName %}
                {% else %} 
                    {% set streamType = 'VIEW' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% endif %}

                {# Stream Append Behavior #}
                {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                    {% if desiredState.config.appendOnly == true %} 
                        {% set streamAppendMode = 'APPEND_ONLY = TRUE' %}
                    {% else %} 
                        {% set streamAppendMode = 'APPEND_ONLY = FALSE' %}
                    {% endif %}
                {% else %}
                    {% set streamAppendMode = '' %}
                {% endif %}

                {# Stream Initial Row Behavior #}
                {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                    {% if desiredState.config.initialRows == true %} 
                        {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = TRUE' %}
                    {% else %} 
                        {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = FALSE' %}
                    {% endif %}
                {% else %}
                    {% set streamInitialRowsMode = '' %}
                {% endif %}

                {# Stream Insert Only Behavior #}
                {% if streamType == 'EXTERNAL TABLE' %}      
                        {% set streamInsertOnlyMode = 'INSERT_ONLY = TRUE' %}
                {% else %}
                    {% set streamInsertOnlyMode = '' %}
                {% endif %}
            {% endif %}

            {# Create Stream first #}
            {% if desiredState or desiredState == currentState %}

                {% if currentState == undefined or desiredState.config.redeploymentBehavior == 'Create or Replace' %}
                    {{ stage('Create Stream', true, "sql", "alter") }}
                    CREATE OR REPLACE STREAM {{ fullyQualifiedStreamName }}
                        ON {{ streamType }} {{ refLink }}
                        {{ streamAppendMode }}
                        {{ streamInitialRowsMode }}
                        {{ streamInsertOnlyMode }}

                {% elif currentState != undefined and desiredState.config.redeploymentBehavior == 'Create If Not Exists'%}
                    {{ stage('Re-Create Stream at existing offset', true, "sql", "alter") }}
                    CREATE STREAM IF NOT EXISTS {{ fullyQualifiedStreamName }}
                        ON {{ streamType }} {{ refLink }}
                        {{ streamAppendMode }}
                        {{ streamInitialRowsMode }}
                        {{ streamInsertOnlyMode }}

                {% elif currentState != undefined and desiredState.config.redeploymentBehavior == 'Create At Existing Stream'%}
                    {{ stage('Re-Create Stream at existing offset', true, "sql", "alter") }}
                    CREATE OR REPLACE STREAM {{ fullyQualifiedStreamName }}
                        ON {{ streamType }} {{ refLink }}
                        AT(STREAM => '{{ fullyQualifiedStreamName }}');

                {% else %}
                    {{ stage('Unknown state.', true, "sql", "alter") }}
                    select 1 = 0
                {% endif %}


            {% elif desiredState == undefined %}

                {# Source Stream Location and Name #}
                {% set streamTargetLocationName = currentState.node.location.name %}
                {% set streamTargetDatabaseName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
                {% set streamTargetSchemaName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
                {% set streamName = currentState.node.name %}
                {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}

                {{ stage('Drop Stream', true, "sql", "drop") }}
                DROP STREAM IF EXISTS {{ fullyQualifiedStreamName }}

            {%- else -%}

                {{ stage('Unknown state.  Nothing to do.') }}
                select 1 = 0

            {% endif %}

        run:
          templateString: ""
    name: Stream
    version: 1
  StepType-154:
    id: "154"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |+
        capitalized: Task DAG Create Root
        short: TGCR
        tagColor: red
        plural: None

        deployStrategy: advanced

        config: 
        - groupName: Scheduling Options
          items:
          - displayName: Scheduling Options
            attributeName: schedulingMode
            type: dropdownSelector
            default: Warehouse Task
            options:
              - Warehouse Task
              - Serverless Task
            isRequired: true

          - displayName: Select Warehouse on which to run task
            attributeName: whName
            type: textBox
            default: '<WAREHOUSE_NAME>'
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Warehouse Task' %} true {% else %} false {% endif %}"

          - displayName: Select initial serverless Warehouse size
            attributeName: serverlessSize
            type: dropdownSelector
            default: 'MEDIUM'
            options:
              - XSMALL
              - SMALL
              - MEDIUM
              - LARGE
              - XLARGE
              - XXLARGE
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Serverless Task' %} true {% else %} false {% endif %}"

          - displayName: Task Schedule
            attributeName: schedulePeriodOption
            type: dropdownSelector
            default: Minutes
            options:
              - Minutes
              - CRON
            isRequired: true

          - displayName: Enter task schedule using minutes
            attributeName: schedulePeriod
            type: textBox
            default: '60'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Minutes' %} true {% else %} false {% endif %}"

          - displayName: Enter task schedule using CRON
            attributeName: scheduleCRON
            type: textBox
            default: '5 0-23 * * * America/Los_Angeles'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'CRON' %} true {% else %} false {% endif %}"

          - displayName: Root task SQL
            attributeName: tskSql
            type: textBox
            default: 'select current_timestamp()'
            isRequired: true

        - groupName: Hidden Config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: task
            options:
            - task
            isRequired: false

      templates:
        create:
          templateString: |+
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Task DAG Create Root == #}
            {# == Node Type Description    : This node creates a standalone root task that initiates a run of the DAG == #}

            {% if (currentState == undefined and desiredState != undefined) or (currentState != undefined and desiredState != undefined ) %}

            {% set targetNodeDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
            {% set targetNodeSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 

            {# Task Info #}
            {% set taskName = desiredState.node.name  %}
            {%- set fullyQualifiedTaskName = targetNodeDatabase + '.' + targetNodeSchema + '."' + taskName + '"' -%} 

            {# Task Type #}
            {%- if desiredState.config.schedulingMode == 'Warehouse Task' -%} 
                {%- set taskType = 'WAREHOUSE = ' + desiredState.config.whName -%} 
            {%- else -%}
                {%- set taskType = 'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = ' + desiredState.config.serverlessSize -%} 
            {%- endif -%}

            {% set nsVariables = namespace() %}

            {# Schedule Type #}
            {%- if desiredState.config.schedulePeriodOption == 'Minutes' -%} 
                {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + desiredState.config.schedulePeriod + ' MINUTE' + "'" -%} 
            {% else %}
                {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + 'USING CRON ' + desiredState.config.scheduleCRON+"'" %}
            {%- endif -%}

            {{ stage('Suspend Root Task', true, "sql", "alter") }}
            ALTER TASK IF EXISTS {{ fullyQualifiedTaskName }} SUSPEND

            {{ stage('Create Task', true, "sql", "alter") }}
            CREATE OR REPLACE TASK 
                {{ fullyQualifiedTaskName }} 
                {{ taskType}} 
                {{ nsVariables.taskWhenRun }} 
                {% if nsVariables.poll != 'WHEN ' %} {{ nsVariables.poll }} {% endif %}
            AS 
            {{desiredState.config.tskSql }} 

            {% elif desiredState == undefined and currentState != undefined%}

            {# Task Info #}
            {% set targetNodeDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
            {% set targetNodeSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 

            {# Task Info #}
            {% set taskName = currentState.node.name  %}
            {%- set fullyQualifiedTaskName = targetNodeDatabase + '.' + targetNodeSchema + '."' + taskName + '"' -%} 

            {{ stage('Suspend Root Task', true, "sql", "alter") }}
                ALTER TASK IF EXISTS {{ fullyQualifiedTaskName }} SUSPEND
            {{ stage('Drop Current Task', true, "sql", "drop") }}
                DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 

            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}

        run:
          templateString: ""
    name: Task DAG Create Root
    version: 1
  StepType-155:
    id: "155"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Task DAG Root Resume
        short: TGRR
        tagColor: green
        plural: none

        deployStrategy: advanced

        config:
        - groupName: Scheduling Options
          items:
          - displayName: Enter root task name
            attributeName: rootTask
            type: textBox
            default: 'ROOT_TASK'
            isRequired: TRUE

        - groupName: Hidden Config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: task
            options:
            - task
            isRequired: false

        systemColumns:
        - displayName: DAG_RESUME_TIMESTAMP
          transform: current_timestamp()::timestamp_ntz
          dataType: timestamp_ntz
          placement: beginning
          attributeName: dagResumeTS

        - displayName: DAG_ROOT_TASK_NAME
          transform: desiredState.config.rootTask
          dataType: string
          placement: beginning
          attributeName: dagResumeTS
      templates:
        create:
          templateString: |-
            {#
                Copyright (c) 2023 Coalesce. All rights reserved.
            This script and its associated documentation are confidential and proprietary to Coalesce.
            Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
            Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
            does not permit copying or modification for any other purpose.  
            #}
            {# == Node Type Version        : 1  == #}
            {# == Node Type Name           : Task DAG Resume Root == #}
            {# == Node Type Description    : This node resumes the root task and its dependents or child tasks== #}


            {% if desiredState %}

                {# Task Info #}
                {% set sourceStorageLocation = desiredState.sources[0].dependencies[0].node.location.name %} 
                {% set targetNodeDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                {% set targetNodeSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                {%- set fqRootTaskName = targetNodeDatabase + '.' + targetNodeSchema + '.' + desiredState.config.rootTask -%} 

                {% set refLinkPred = "{{ ref('" + sourceStorageLocation + "', '" + desiredState.sources[0].dependencies[0].node.name + "') }}" %}

                {{ stage('Try Enable Root Task', true, "sql", "create") }}
                begin
                
                    let sqlDml1 := 'select system$task_dependents_enable(''{{refLinkPred}}'')';

                    let sqlDml2 := 'select system$task_dependents_enable(''{{fqRootTaskName}}'')';
                    
                    execute immediate sqlDml2;
                    
                    return 'Task resumed';
                        exception
                        when statement_error then
                            return 'Task already running';
                end;

            {% endif %}
        run:
          templateString: ""
    name: Task DAG Resume Root
    version: 1
  StepType-Dimension:
    id: Dimension
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {# The if-block below avoids unnecessary updates when no type 2 column changes are present #}
                        {% if source.columns 
                            | rejectattr('isSurrogateKey')
                            | rejectattr('isBusinessKey')
                            | rejectattr('isChangeTracking')
                            | rejectattr('isSystemVersion')
                            | rejectattr('isSystemCurrentFlag')
                            | rejectattr('isSystemStartDate')
                            | rejectattr('isSystemEndDate')
                            | rejectattr('isSystemCreateDate')
                            | rejectattr('isSystemUpdateDate') 
                            | list | length == 0 
                        %}
                            {# Skip Section #}
                        {% else %}
                          UNION ALL
                          /* Rows Needing To Be Updated Due To Changes To Non-Type-2 columns
                          This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                          SELECT
                          {%- for col in source.columns if not col.isSurrogateKey %}
                              {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                  "DIM"."{{ col.name }}"
                              {% elif col.isSystemCurrentFlag %}
                                  'Y'
                              {% else %}
                                  {{ get_source_transform(col) }}
                              {% endif %}
                              AS "{{ col.name }}",
                          {% endfor -%}
                              'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                          {{ source.join }}
                          INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                          {% for col in source.columns if col.isBusinessKey -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %}
                          WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                          AND (
                          {% for col in source.columns if (col.isChangeTracking) -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %} )
                          {% for col in source.columns if not (   col.isBusinessKey or
                                                                  col.isChangeTracking or
                                                                  col.isSurrogateKey or
                                                                  col.isSystemVersion or
                                                                  col.isSystemCurrentFlag or
                                                                  col.isSystemStartDate or
                                                                  col.isSystemEndDate or
                                                                  col.isSystemUpdateDate or
                                                                  col.isSystemCreateDate) -%}
                              {% if loop.first %}
                                  AND (
                              {% endif %}
                              {% if not loop.first %}
                                  OR
                              {% endif %}
                              NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                              {% if loop.last %}
                                  )
                              {% endif %}
                          {% endfor %}
                        {% endif %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Dimension
    version: 1
  StepType-Fact:
    id: Fact
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Fact
        plural: Facts
        short: FCT
        tagColor: '#D9A438'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |2-

                {% if node.materializationType == 'table' %}
                    {{ stage('Create Fact Table') }}
                
                    CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                
                
                {% elif node.materializationType == 'view' %}
                    {{ stage('Create Fact View') }}
                
                    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%},{% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                    AS
                    {% for source in sources %}
                
                        {% if loop.first %}SELECT {% endif %}
                
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                
                        {% if not loop.last %} UNION ALL {% endif %}
                    {% endfor %}
                
                {% endif %}
                
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% if node.materializationType == 'table' %}
                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                    
                    {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
                    
                    {% for source in sources %}
                    
                        {% if has_business_key %}
                    
                            {{ stage('MERGE ' + source.name | string ) }}
                            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                            USING (
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }})
                                AS "SRC"
                            ON
                            {% for col in source.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                            {% endfor %}
                            WHEN MATCHED
                            {% for col in source.columns if not (   col.isBusinessKey or
                                                                    col.isSystemUpdateDate or
                                                                    col.isSystemCreateDate) %}
                                {% if loop.first %}
                                    AND (
                                {% else %}
                                    OR
                                {% endif %}
                                NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                            THEN UPDATE SET
                            {%- for col in source.columns if not (col.isBusinessKey or col.isSystemCreateDate) %}
                                    "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor %}
                            WHEN NOT MATCHED THEN
                            INSERT (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                            VALUES (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                    
                        {% else %}
                    
                            {{ stage('Insert ' + source.name | string ) }}
                    
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in source.columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                    
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                        {% endif %}
                    {% endfor %}
                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}

                {% if config.testsEnabled %}
                    {% for test in node.tests %}
                        {% if test.runOrder == 'After' %}
                            {{ test_stage(test.name, test.continueOnFailure) }}
                            {{ test.templateString }}
                        {% endif %}
                    {% endfor %}

                    {% for column in columns %}
                        {% for test in column.tests %}
                            {{ test_stage(column.name + ": " + test.name) }}
                            {{ test.templateString }}
                        {% endfor %}
                    {% endfor %}
                {% endif %}
                
                
    name: Fact
    version: 1
  StepType-Source:
    id: Source
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Source
        short: null
        tagColor: '#D26000'
        plural: Sources
      templates:
        create:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
        run:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
    name: Source
    version: 1
  StepType-Stage:
    id: Stage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |2

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Stage
    version: 1
  StepType-View:
    id: View
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: View
        short: V
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: View
    version: 1
  StepType-persistentStage:
    id: persistentStage
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Persistent Stage
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-

            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                    {% endfor %}            
                {% endif %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Persistent Stage
    version: 1
subgraphs: {}
version: 2
