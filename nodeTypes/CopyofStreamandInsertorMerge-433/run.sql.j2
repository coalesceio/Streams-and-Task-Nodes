{#
    Copyright (c) 2023 Coalesce. All rights reserved.
This script and its associated documentation are confidential and proprietary to Coalesce.
Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
does not permit copying or modification for any other purpose.  
#}
{# == Node Type Version        : 1  == #}
{# == Node Type Name           : Stream and Insert or Merge == #}
{# == Node Type Description    : This node inserts/merge data into target table == #}

{# Development mode -To test the SQL the task will execute to make sure it runs without errors and returns the expected data #}

{% if config.devMode == true %}

    {% set nsVariables = namespace() %}

    {# Target Stream Location and Name #}
    {% set streamTargetLocationName = node.location.name %}
    {% set streamTargetDatabaseName = storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
    {% set streamTargetSchemaName = storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
    {% set streamName = node.name + '_STREAM' %}
    {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}

    {# Target Table Info #}
    {% set targetTableDatabase = ref_no_link(node.location.name, node.name).split('.')[0] %} 
    {% set targetTableSchema = ref_no_link(node.location.name, node.name).split('.')[1] %} 
    {% set fullyQualifiedTargetTableName = ref_no_link(node.location.name, node.name) %}
    {% set targetTableName = node.name %}

    {% set tableColumnIds = columns | map(attribute='id') | list %}
    {% set tableColumnNames = columns | map(attribute='name') | list %}
    {% set ret_clause = get_clause( sources[0].join ).lstrip()%}
    {% set upper_query = ret_clause | upper %}
    {% if 'ORDER BY' in upper_query %}
	   {% set index = upper_query.find('ORDER BY') %}
	   {% set before_order_by = ret_clause[:index] %}
	   {% set after_order_by = ret_clause[index:]%}
       {% set ret_clause = before_order_by  %}
    {% else %}
       {% set before_order_by = ret_clause %}
       {% set after_order_by = '' %}
    {% endif %}
{% set modified_string = namespace(value="") %}
{% set words = ret_clause.split() %}
{% for word in words %}
    {% if '.' in word %}
        {% set parts = word.split('.') %}
        {% set modified_word = "SIM_" ~ parts[0] ~ "_STREAM." ~ parts[1] %}
        {% set modified_word = modified_word.replace('"', "") %}
    {% else %}
        {% set modified_word = word %}
    {% endif %}
    {% set modified_string.value = modified_string.value ~ " " ~ modified_word %}
{% endfor %}
{% set ret_clause = modified_string.value %}

    {# Merge partition by and order by #}
    {%- if config.loadType == 'Merge' -%} 
        {% set tableColumnNamesUpdate = tableColumnNames | reject('in', config.partitionBy.get('items') | map(attribute='partColName.name')) | list %}
        
        {% for i in config.partitionBy.get('items') %}
            {%- if loop.first -%}
                {% set nsVariables.partition = '"' + i.partColName.name + '"' %}
            {% else %}
                {% set nsVariables.partition = nsVariables.partition + ', "' + i.partColName.name + '"' %}
            {%- endif -%}

            {% set tableColumnNamesUpdate = tableColumnNames | reject('in', i.partColName.name) | list %}

        {% endfor %}

        {% for i in config.orderBy.get('items') %}
            {%- if loop.first -%}
                {% set nsVariables.orderBy = '"' + i.colName.name + '" ' + i.sortOrd %}
            {% else %}
                {% set nsVariables.orderBy = nsVariables.orderBy + ', "' + i.colName.name + '" ' + i.sortOrd %}
            {%- endif -%}
        {% endfor %}
        {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}

        {%- set nsVariables.tableKey = config.partitionBy.get('items') %}
        {% set nsVariables.tableKey = nsVariables.tableKey | map(attribute='partColName.name') | list %}
    {%- endif -%}

    {# Merge partition by and order by #}
    {%- if config.loadType == 'Merge' -%} 
        {% set tableColumnNamesUpdate = tableColumnNames | reject('in', config.partitionBy.get('items') | map(attribute='partColName.name')) | list %}
        
        {% for i in config.partitionBy.get('items') %}
            {%- if loop.first -%}
                {% set nsVariables.partition = '"' + i.partColName.name + '"' %}
            {% else %}
                {% set nsVariables.partition = nsVariables.partition + ', "' + i.partColName.name + '"' %}
            {%- endif -%}

            {% set tableColumnNamesUpdate = tableColumnNames | reject('in', i.partColName.name) | list %}

        {% endfor %}

        {% for i in config.orderBy.get('items') %}
            {%- if loop.first -%}
                {% set nsVariables.orderBy = '"' + i.colName.name + '" ' + i.sortOrd %}
            {% else %}
                {% set nsVariables.orderBy = nsVariables.orderBy + ', "' + i.colName.name + '" ' + i.sortOrd %}
            {%- endif -%}
        {% endfor %}
        {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}

        {%- set nsVariables.tableKey = config.partitionBy.get('items') %}
        {% set nsVariables.tableKey = nsVariables.tableKey | map(attribute='partColName.name') | list %}
    {%- endif -%}

    {{ stage('Insert or Merge Data') }}

        {% if config.loadType == 'Insert' -%} 
            INSERT INTO {{ fullyQualifiedTargetTableName }}
            SELECT  {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for id in tableColumnIds %}

                    {% set columnTransformation = sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='transform') | first -%}
                    {%- if columnTransformation == "" -%}
                    {% set col =  sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='sourceColumns') | first  |  map(attribute='column')  | list |  map(attribute='name') | first   -%}
                    "{{ col }}" as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                    {%- else -%}
                    {% set col = sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='name') | first -%}
                    {{ columnTransformation  }} as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                    {%- endif %}
                {%- endfor %}
            FROM {{ fullyQualifiedStreamName }}
			{% if config.propagateDeletes %} WHERE  METADATA$ACTION != 'DELETE'
			{% if ret_clause|trim !='' %}
			{{ret_clause}}
			{% endif %}
			{%- else -%}
			{% set join_clause = ret_clause | replace("AND ", "WHERE ", 1) if ret_clause.startswith("AND ") else ret_clause %}
			{{join_clause}}
			{% endif %}            
			{% if config.groupByAll %}GROUP BY ALL{% endif %}
			{{after_order_by}}
            {% else -%}
            MERGE INTO {{ fullyQualifiedTargetTableName }} tgt USING
            -- Select Statement Preparing Data for Merge
            (SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for id in tableColumnIds %}

                    {% set columnTransformation = sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='transform') | first -%}
                    {%- if columnTransformation == "" -%}
                    {% set col =  sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='sourceColumns') | first  |  map(attribute='column')  | list |  map(attribute='name') | first   -%}
                    "{{ col }}" as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                    {%- else -%}
                    {% set col = sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='name') | first -%}
                    {{ columnTransformation }} as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                    {%- endif %}
                {%- endfor %}
            FROM {{ fullyQualifiedStreamName }}
			{% if config.propagateDeletes %} WHERE  METADATA$ACTION != 'DELETE'
			{% if ret_clause|trim !='' %}
			{{ret_clause}}
			{% endif %}
			{%- else -%}
			{% set join_clause = ret_clause | replace("AND ", "WHERE ", 1) if ret_clause.startswith("AND ") else ret_clause %}
			{{join_clause}}
			{% endif %}           
			{% if config.groupByAll %}GROUP BY ALL{% endif %}
            QUALIFY {{ nsVariables.rowNumber }} = 1
			{{after_order_by}}
			) src
           
            -- Join Condition
            ON {% for col in nsVariables.tableKey -%}
                src."{{ col }}" = tgt."{{ col }}"
            {% if not loop.last %} AND {% endif %}
                {%- endfor -%}
           
            -- What to do if data is matched based on table key
            WHEN MATCHED THEN UPDATE SET 
                {%- for col in tableColumnNamesUpdate %}
                        tgt."{{ col }}" = src."{{ col }}"
                        {%- if not loop.last -%}, {%- endif %}
                {%- endfor %}
            -- What to do with new records based on table key
            WHEN NOT MATCHED THEN INSERT 
                (
                {%- for col in columns -%}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                {% endfor %}) 
            VALUES (
                {%- for col in columns -%}
                        src."{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                {% endfor %})
            {%- endif -%}

{% endif -%}