{#
    Copyright (c) 2023 Coalesce. All rights reserved.
This script and its associated documentation are confidential and proprietary to Coalesce.
Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
does not permit copying or modification for any other purpose.  
#}
{# == Node Type Name           : Work With Task == #}
{# == Node Type Description    : This node creates a work table and a task to insert data into work table == #}

{# Parameter Check for Deployment #}
{%if desiredState and currentState != desiredState and desiredState.config.schedulingMode == 'Warehouse Task' %}
     {% if desiredState.parameters == {} or 'targetTaskWarehouse' not in  desiredState.parameters or desiredState.parameters.targetTaskWarehouse == ''%}

         {{stage('WARNING')}}
         
          /*Add parameter targetTaskWarehouse in workspace settings and deployment environment for successful execution of node.
          The default value for the parameter is 'DEV ENVIRONMENT'.
          For more information, refer to the documentation.*/
	{%endif%}
{%endif%}


{# Create / Alter Table first #}

{% if desiredState and desiredState != currentState%}

    {# Target Table Info #}
    {% set targetTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
    {% set targetTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
    {% set fullyQualifiedTargetTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

    {% if currentState == undefined or currentState.storageLocations | length == 0%}
        {# Figure out cluster key #}
        {% set nsVariables = namespace(finalClusterKey="") %}
        {% if desiredState.config.clusterKey == true %}
            {% if desiredState.config.clusterKeyExpressions == true %}
                {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                {%- set nsVariables = namespace(clusterValues=[]) %}

                {% for r in column %}
                    {% if expression[loop.index0] == "" %}
                        {% set nsVariables.clusterValues = nsVariables.clusterValues + ['"'+r+'"'] %}
                    {% else %}
                        {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                    {% endif %}
                {% endfor %}

                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

            {% else %}

                {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                {%- set nsVariables = namespace(clusterValues=[]) %}

                {% for r in column %}
                    {% set nsVariables.clusterValues = nsVariables.clusterValues + ['"'+r+'"'] %}
                {% endfor %}

                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

            {% endif %}
        {% endif %}

        {{ stage('Create Work Table',true,"sql","create") }}
        CREATE OR REPLACE TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
        (
            {% for col in desiredState.columns %}
                "{{ col.name }}" {{ col.dataType }}
                {%- if not col.nullable %} NOT NULL
                    {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                {% endif %}
                {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                {%- if not loop.last -%}, {% endif %}
            {% endfor %}
        )
        {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}

        {% if desiredState.config.clusterKey == true %}
            {{ stage('Apply Table Clustering',true,"sql","create") }}
            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} {{ nsVariables.finalClusterKey }}

            {{ stage('Resume Recluster Table',true,"sql","create") }}
            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} RESUME RECLUSTER
        {% endif %}

    {% elif currentState != undefined %}

        {# Change Node Name or Change Storage Location #}
        {# Storage Location Tests #}
        {# Only need to account for updated Storage Location mappings   #}     
        {# Current and Desired Namespace Varialbes initialisation #}

            {% set nsVariables = namespace(storageLocationTest=true) %}

            {% if desiredState.config.devMode %}
                {% set nsMetaVariables = namespace(
                    joinTest            = true,
                    transformTest       = true,
                    sourceLinkTest      = true,
                    orderByTest         = true,
                    metaDataChanged     = false,
                    joinDiff            = [],
                    transformDiff       = [],
                    sourceLinkDiff      = [],
                    insertStrategyDiff  = [],
                    truncateBeforeDiff  = [],
                    distinctDiff        = [],
                    groupByAllDiff      = [],
                    orderByDiff         = [],
                    metaDataChanges     = [],
                    metadataUpdate      = 'Metadata Update'
                ) %}
            {% endif %}
        
            {# Test  #}
            {%if currentState.storageLocations|length == 0%}          
              {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', currentState.node.location.name) | map(attribute='database') | string %}
              {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', currentState.node.location.name) | map(attribute='schema') | string %}
               {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
               
            {%else %}   
            {# Current target node mappings #}
            {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', currentState.node.location.name) | map(attribute='database') | first %}
            {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', currentState.node.location.name) | map(attribute='schema') | first %}
            {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}  
			{% endif %}		 
        
            {# Desired target node mappings #}
            {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', desiredState.node.location.name) | map(attribute='database') | first %}
            {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', desiredState.node.location.name) | map(attribute='schema') | first %}
            {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}           
            
             {% if currentDatabaseSchema != desiredDatabaseSchema %}
                {% set nsVariables.storageLocationTest = false %}
             {% endif %}
        
        {% set nodeCommentTest = currentState.node.description == desiredState.node.description %}
 
        {# Clustering Test #}
        {% set clusterKeyTest = currentState.config.clusterKey == desiredState.config.clusterKey %}
        {% set clusterKeyExpressionsTest = currentState.config.clusterKeyExpressions == desiredState.config.clusterKeyExpressions %}
        {% set clusterKeyConfigTest = currentState.config.clusterKeyConfig == desiredState.config.clusterKeyConfig %}
        {% set clusterKeyConfigExpressionsTest = currentState.config.clusterKeyConfigExpressions == desiredState.config.clusterKeyConfigExpressions %}

        {% if 
            clusterKeyTest == false or
            clusterKeyExpressionsTest == false or
            clusterKeyConfigTest == false or
            clusterKeyConfigExpressionsTest == false %}

            {% set clusterTest = false %}
        {% else %}
            {% set clusterTest = true %}
        {% endif %}

         {# Rename / Move Object #}
            {% if (nsVariables.storageLocationTest == false or currentState.node.name != desiredState.node.name) %}
                {{ stage('Rename and / or Move Table') }}
                {% set srcSchName = currentState.node.location.name %}
                {% set cdb = currentState.storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='database') | first %}
                {% set csch = currentState.storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='schema') | first %}

                ALTER TABLE  "{{cdb}}"."{{csch}}"."{{currentState.node.name}}"
                RENAME TO   {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}

                {# Metadata changes detected #}
                {% if desiredState.config.devMode %}
                    {% set nsMetaVariables.metaDataChanged = true %}
                {%endif%}
            {% endif %}


        {# Change table description #}
        {% if (nodeCommentTest == false or currentState.node.description != desiredState.node.description) %}
            {{ stage('Change table description') }}
            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
            SET COMMENT = '{{ desiredState.node.description | escape }}'

            {# Metadata changes detected #}
            {% if desiredState.config.devMode %}
                {% set nsMetaVariables.metaDataChanged = true %}
            {%endif%}
        {% endif %}


        {# Drop Columns #}
        {% set nsVariables = namespace(colchanges=0) %}
        {% for dropCurCol in currentState.columns %}
            {% if dropCurCol.id not in desiredState.columns | map(attribute="id") %}
            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                {% if nsVariables.colchanges == 1 %}
                    {{ stage('Drop Columns') }}
                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                    DROP COLUMN 
                {% else %}
                    , 
                {% endif %}
                "{{ dropCurCol.name }}"

                {# Metadata changes detected #}
                {% if desiredState.config.devMode %}
                    {% set nsMetaVariables.metaDataChanged = true %}
                {%endif%}
            {% endif %}
        {% endfor %}

        {# Add Columns #}
        {% set nsVariables = namespace(colchanges=0) %}
        {% for addDesCol in desiredState.columns %}
            {% if addDesCol.id not in currentState.columns | map(attribute="id") %}
            {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                {% if nsVariables.colchanges == 1 %}
                    {{ stage('Add Columns') }}
                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                    ADD COLUMN
                {% else %}
                    ,
                {% endif %}
                    "{{ addDesCol.name }}" {{ addDesCol.dataType }}
                    {%- if not addDesCol.nullable %} NOT NULL
                        {%- if addDesCol.defaultValue | length > 0 %} DEFAULT {{ addDesCol.defaultValue }}{% endif %}
                    {% endif %}
                    {%- if addDesCol.description | length > 0 %} COMMENT '{{ addDesCol.description | escape }}'{% endif %}

                {# Metadata changes detected #}
                {% if desiredState.config.devMode %}
                    {% set nsMetaVariables.metaDataChanged = true %}
                {%endif%}
            {% endif %}
        {% endfor %}

        {# Rename Columns #}
        {% for renameCurCol in currentState.columns %}
            {% if renameCurCol.id in desiredState.columns | map(attribute="id") %}
                {% set desiredColumnName = desiredState.columns | selectattr('id', 'equalto', renameCurCol.id) | map(attribute='name') | first %}
                {% if renameCurCol.name != desiredColumnName %}
                    {{ stage('Rename Column ' + renameCurCol.name) }}
                    ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                    RENAME COLUMN "{{ renameCurCol.name }}"
                    TO "{{ desiredColumnName }}"

                    {# Metadata changes detected #}
                    {% if desiredState.config.devMode %}
                        {% set nsMetaVariables.metaDataChanged = true %}
                    {%endif%}
                {% endif %}
            {% endif %}
        {% endfor %}

        {# Change data types or other column level chnages #}
        
        {% set nsVariables.colchanges = 0 %}
        {% for alterCurCol in currentState.columns %}        
            {% if alterCurCol.id in desiredState.columns | map(attribute="id") %}
                {% set currentDatatype = alterCurCol.dataType %}
                {% set currentNullable = alterCurCol.nullable %}
                {% set currentDefaultValue = alterCurCol.defaultValue %}
                {% set currentDescription = alterCurCol.description %}

                {% set desiredColumnName = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='name') | first %}
                {% set desiredDatatype = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='dataType') | first %}
                {% set desiredNullable = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='nullable') | first %}
                {% set desiredDefaultValue = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='defaultValue') | first %}
                {% set desiredDescription = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='description') | first %}

                {% set datatypeTest = currentDatatype == desiredDatatype %}
                {% set nullableTest = currentNullable == desiredNullable %}
                {% set defaultValueTest = currentDefaultValue == desiredDefaultValue %}
                {% set descriptionTest = currentDescription == desiredDescription %}

                {% if (datatypeTest == false or 
                        nullableTest == false  or
                        defaultValueTest == false or
                        descriptionTest == false) %}
                    {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}

                    {% if nsVariables.colchanges == 1 %}
                        {{ stage('Change Column Attributes') }}
                        ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                        MODIFY
                    {% endif %}
                    {% if datatypeTest == false %}
                        {% if nsVariables.colchanges > 1 %},{% endif %}
                        COLUMN "{{ desiredColumnName }}"
                        SET DATA TYPE {{ desiredDatatype }}
                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                    {% endif %}
                    {% if nullableTest == false %}
                        {% if nsVariables.colchanges > 1 %},{% endif %}
                        COLUMN "{{ desiredColumnName }}"
                        {% if currentNullable == true %}
                            SET
                        {% else %}
                            DROP
                        {% endif %}
                        NOT NULL
                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                    {% endif %}
                    {% if descriptionTest == false %}
                        {% if nsVariables.colchanges > 1 %},{% endif %}
                        COLUMN "{{ desiredColumnName }}"
                        COMMENT '{{ desiredDescription | escape }}'
                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                    {% endif %}
                    {% if defaultValueTest == false %}
                        {% if nsVariables.colchanges > 1 %},{% endif %}
                        COLUMN "{{ desiredColumnName }}"
                        {% if desiredDefaultValue == '' %}
                            DROP DEFAULT
                        {% else %}
                            SET DEFAULT {{ desiredDefaultValue }}
                        {% endif %}
                        {% set nsVariables.colchanges = nsVariables.colchanges + 1 %}
                    {% endif %}

                    {# Metadata changes detected #}
                    {% if desiredState.config.devMode %}
                        {% set nsMetaVariables.metaDataChanged = true %}
                    {%endif%}
                    
                {% else %}
                                        
                {% endif %}
            {% endif %}
        {% endfor %}

        {# Figure out cluster key #}
        {% set nsVariables = namespace(finalClusterKey="") %}
        {% if clusterTest == false %}
            {% if desiredState.config.clusterKeyExpressions == true %}
                {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                {%- set nsVariables = namespace(clusterValues=[]) %}

                {% for r in column %}
                    {% if expression[loop.index0] == "" %}
                        {% set nsVariables.clusterValues = nsVariables.clusterValues + ['"'+r+'"'] %}
                    {% else %}
                        {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                    {% endif %}
                {% endfor %}

                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

            {% elif desiredState.config.clusterKey == true %}

                {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                {%- set nsVariables = namespace(clusterValues=[]) %}

                {% for r in column %}
                    {% set nsVariables.clusterValues = nsVariables.clusterValues + ['"'+r+'"'] %}
                {% endfor %}

                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}
            
            {% else %}

                {% set nsVariables.finalClusterKey = 'DROP CLUSTERING KEY' %}

            {% endif %}

            {{ stage('Recluster TABLE') }}
            ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
            {{ nsVariables.finalClusterKey }}

            {# Metadata changes detected #}
            {% if desiredState.config.devMode %}
                {% set nsMetaVariables.metaDataChanged = true %}
            {%endif%}

        {% endif %}

        {% if desiredState.config.devMode %}
            {% if nsMetaVariables.metaDataChanged == false %}

                {# =========================================================
                Compare source counts
                ========================================================= #}
                {% set sourcesTest = currentState.sources | count == desiredState.sources | count %}

                {% if sourcesTest %}
                    {% for src in desiredState.sources %}
                        {% set matchingSource = currentState.sources | selectattr('name', 'equalto', src.name) | first %}
                        {% if matchingSource %}

                            {# =========================================================
                            Join comparison
                            ========================================================= #}
                            {% set desiredStateSources = src.join | replace("{{", '"{{"') | replace("}}", '"}}"') | replace('/*', '/ *') | replace('*/', '* /') %}
                            {% set currentStateSources = matchingSource.join | replace("{{", '"{{"') | replace("}}", '"}}"') | replace('/*', '/ *') | replace('*/', '* /') %}

                            {# Same number of sources — compare join transformations #}
                            {% if desiredStateSources != currentStateSources %}
                                {% set nsMetaVariables.joinTest = false %}
                                {% set _ = nsMetaVariables.joinDiff.append({
                                    "Source": src.name,
                                    "is": desiredStateSources,
                                    "was": currentStateSources }) %}
                            {% endif %}

                            {# =========================================================
                            Transformation and column source changes comparison (per column)
                            ========================================================= #}
                            {% for col in src.columns %}

                                {# Try to get matching column #}
                                {% set matched_column = matchingSource.columns
                                    | selectattr('id', 'equalto', col.id)
                                    | first
                                %}

                                {% if matched_column %}

                                    {# Transformation Changes #}
                                    {% set currentTransform = matchingSource.columns
                                        | selectattr('id', 'equalto', col.id)
                                        | map(attribute='transform')
                                        | first
                                        | default('')
                                    %}

                                    {% if currentTransform != col.transform %}
                                        {% set nsMetaVariables.transformTest = false %}
                                        {% set _ = nsMetaVariables.transformDiff.append({
                                            "Source Name": src.name,
                                            "Column Name": col.name,
                                            "is": col.transform | replace('/*', '/ *') | replace('*/', '* /'),
                                            "was": currentTransform | replace('/*', '/ *') | replace('*/', '* /')
                                        }) %}
                                    {% endif %}

                                    {# Column Source Changes #}
                                    {% set currentSource = matchingSource.columns
                                        | selectattr('id', 'equalto', col.id)
                                        | map(attribute='sourceColumns')
                                        | first
                                        | default('')
                                    %}

                                    {% if currentSource != col.sourceColumns %}
                                        {% set nsMetaVariables.sourceLinkTest = false %}
                                        {% set _ = nsMetaVariables.sourceLinkDiff.append({
                                            "Source Name": src.name,
                                            "Column Name": col.name,
                                            "is": (col.sourceColumns | selectattr('node','defined') | map(attribute='node.name') | first) | default('') ~ "-" ~ (col.sourceColumns | selectattr('column','defined') | map(attribute='column.name') | first) | default(''),
                                            "was": (currentSource | selectattr('node','defined') | map(attribute='node.name') | first) | default('') ~ "-" ~ (currentSource | selectattr('column','defined') | map(attribute='column.name') | first) | default('')
                                        }) %}
                                    {% endif %}
                                {% endif %}
                            {% endfor %}
                        {% endif %}
                    {% endfor %}

                    {% if nsMetaVariables.transformTest == false %}
                        {{ update_metadata("Transform", nsMetaVariables.transformDiff, "Transform") }}
                    {% endif %}

                    {% if nsMetaVariables.sourceLinkTest == false %}
                        {{ update_metadata("Source Link", nsMetaVariables.sourceLinkDiff, "Source Link") }}
                    {% endif %}
                {% else %}
                    {# Source count mismatch — compare source names instead #}
                    {% set desiredStateSources = desiredState.sources | map(attribute='name') | list | sort %}
                    {% set currentStateSources = currentState.sources | map(attribute='name') | list | sort %}

                    {% if desiredStateSources != currentStateSources %}
                        {% set nsMetaVariables.joinTest = false %}
                        {% set _ = nsMetaVariables.joinDiff.append({"is": desiredStateSources, "was": currentStateSources }) %}
                    {% endif %}
                {% endif %}

                {% if nsMetaVariables.joinTest == false %}
                        {{ update_metadata("Join", nsMetaVariables.joinDiff, "Join") }}
                {% endif %}

                {# =========================================================
                Insert Strategy comparison
                ========================================================= #}
                {% if currentState.config.insertStrategy != desiredState.config.insertStrategy %}
                    {% set _ = nsMetaVariables.insertStrategyDiff.append({
                        "is": desiredState.config.insertStrategy,
                        "was": currentState.config.insertStrategy
                    }) %}

                    {{ update_metadata("Insert Strategy", nsMetaVariables.insertStrategyDiff, "Insert Strategy") }}

                {% endif %}

                {# =========================================================
                Truncate Table comparison
                ========================================================= #}
                {% if currentState.config.truncateBefore != desiredState.config.truncateBefore %}
                    {% set _ = nsMetaVariables.truncateBeforeDiff.append({
                        "is": desiredState.config.truncateBefore,
                        "was": currentState.config.truncateBefore
                    }) %}

                    {{ update_metadata("Truncate Before", nsMetaVariables.truncateBeforeDiff, "Truncate Before") }}

                {% endif %}

                {# =========================================================
                Distinct Toggle comparison
                ========================================================= #}
                {% if currentState.config.selectDistinct != desiredState.config.selectDistinct %}
                    {% set _ = nsMetaVariables.distinctDiff.append({
                        "is": desiredState.config.selectDistinct,
                        "was": currentState.config.selectDistinct
                    }) %}

                    {{ update_metadata("Distinct", nsMetaVariables.distinctDiff, "Distinct") }}

                {% endif %}

                {# =========================================================
                GroupByAll Toggle comparison
                ========================================================= #}
                {% if currentState.config.groupByAll != desiredState.config.groupByAll %}
                    {% set _ = nsMetaVariables.groupByAllDiff.append({
                        "is": desiredState.config.groupByAll,
                        "was": currentState.config.groupByAll
                    }) %}
                    
                    {{ update_metadata("GroupByAll", nsMetaVariables.groupByAllDiff, "GroupByAll") }}

                {% endif %}

                {# =========================================================
                Order By comparison (per column)
                ========================================================= #}
                {% if currentState.config.orderby != desiredState.config.orderby %}

                    {% set nsMetaVariables.orderByTest = false %}
                    {% set _ = nsMetaVariables.orderByDiff.append({
                            "is": desiredState.config.orderby,
                        "was": currentState.config.orderby
                    }) %}

                {% elif currentState.config.orderby and desiredState.config.orderby %}

                    {% set desiredSortColList = [] %}
                    {% set currentSortColList = [] %}

                    {# Desired Column sort order #}
                    {% for item in desiredState.config.orderbycolumn.get('items', []) %}
                        {% set _ = desiredSortColList.append({
                                    "Column Name": item.sortColName.name,
                                    "Sort Order": item.sortOrder
                        }) %}
                    {% endfor%}
                    {# Current Column sort order #}
                    {% for item in currentState.config.orderbycolumn.get('items', []) %}
                        {% set _ = currentSortColList.append({
                                    "Column Name": item.sortColName.name,
                                    "Sort Order": item.sortOrder
                        }) %}
                    {% endfor%}

                    {% if desiredSortColList != currentSortColList %}
                        {% set nsMetaVariables.orderByTest = false %}
                        {% set _ = nsMetaVariables.orderByDiff.append({
                            "is": desiredSortColList,
                            "was": currentSortColList
                        }) %}
                    {% endif %}
                    {% endif %}

                {% if nsMetaVariables.orderByTest == false %}
                    {{ update_metadata("Order By", nsMetaVariables.orderByDiff, "Order By") }}
                {% endif %}

                {# =========================================================
                DevMode Toggle comparison
                ========================================================= #}
                {% if currentState.config.devMode != desiredState.config.devMode %}
                    
                    {{ update_metadata("DevMode", {"is": desiredState.config.devMode, "was": currentState.config.devMode}, "DevMode") }}

                {% endif %}

                {# =========================================================
                Handle detected metadata changes and update
                ========================================================= #}
                {% if nsMetaVariables.metaDataChanges | length == 0 %}
                    {{ stage('Metadata Update-Default') }}
                {% else %}
                    {{ stage(nsMetaVariables.metadataUpdate) }}
                    -- Metadata changes detected
                    /* {{ nsMetaVariables.metaDataChanges }} */
                {% endif %}
                select 1=0
            {% endif %}
        {% endif %}
    {% endif %}

{% elif currentState != undefined and desiredState == undefined %}

    {# Table or View Name #}
    {% set targetObjectDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
    {% set targetObjectSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
    {% set fullyQualifiedTargetObjectName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

    {{ stage('Drop Table') }}
    DROP {{ currentState.node.materializationType }} IF EXISTS {{ fullyQualifiedTargetObjectName }}

{% endif %}

{# Create Task Second #}

{% if desiredState and  desiredState != currentState%}

        {# Target Table Info #}
        {% set targetTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
        {% set targetTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
        {% set fullyQualifiedTargetTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}


		{% if desiredState.config.devMode == false %}
			{%- if desiredState.config.schedulePeriodOption == 'Predecessor' -%} 
				{% set fullyQualifiedRootTaskName = ref_no_link(desiredState.node.location.name, desiredState.config.rootTask) %}
				{{ stage('Suspend Root Task',true,"sql","create") }}
				ALTER TASK {{ fullyQualifiedRootTaskName }} SUSPEND
			{%- endif -%}

        {%-if currentState !=undefined and (currentState.config.schedulePeriodOption != desiredState.config.schedulePeriodOption or currentState.config.rootTask != desiredState.config.rootTask)-%}            
         {%- if currentState.config.schedulePeriodOption == 'Predecessor' -%}
            {% set fullyQualifiedRootTaskName = ref_no_link(currentState.node.location.name, currentState.config.rootTask) %}

            {{ stage('Suspend Root Task',true,"sql","create") }}

            ALTER TASK {{ fullyQualifiedRootTaskName }} SUSPEND

          {%- endif -%}
        {%-endif -%}

            {{ stage('Create Task',true,"sql","create") }}
            {# Set Namespace Variables #}
            {% set nsVariables = namespace(taskWhenRun="") %}
            {% set nsVariables = namespace(poll="WHEN ") %}
			
			{# Task Info - Use ref() #}
			{% set taskName = desiredState.node.name + '_TASK' %}
			{% set fullyQualifiedTaskName = ref_no_link(desiredState.node.location.name, taskName) %}

            {# Task Type #}
            {%- if desiredState.config.schedulingMode == 'Warehouse Task' -%} 
                {# Can be updated during deployment via a parameter to account for different warehouse names in different deployments #}
			  {% if 'targetTaskWarehouse'  in  desiredState.parameters %}
                {% if desiredState.parameters.targetTaskWarehouse == 'DEV ENVIRONMENT' %}
                    {% set taskType = 'WAREHOUSE = ' + desiredState.config.whName %}
                {% else %}
                    {% set taskType = 'WAREHOUSE = ' + desiredState.parameters.targetTaskWarehouse %}
                {% endif %}
			  {% endif %}
            {%- else -%}
                {%- set taskType = 'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = ' + desiredState.config.serverlessSize -%} 
            {%- endif -%}
           
            {# Schedule Type #}
            {%- if desiredState.config.schedulePeriodOption == 'Minutes' -%} 
                {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + desiredState.config.schedulePeriod + ' MINUTE' + "'" -%} 
            {% elif desiredState.config.schedulePeriodOption == 'CRON' %}
                {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + 'USING CRON ' + desiredState.config.scheduleCRON +"'" %}
            {%- else -%}
                {%- set nsVariables.taskWhenRun = 'AFTER ' -%}
                {%- set predecessorTasks = (desiredState.config.predTask).split(",") -%}

                {%- for p in predecessorTasks -%}
                    {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + targetTableDatabase + '.' + targetTableSchema + '."' + p +'"'-%}
                    {%- if not loop.last -%} 
                        {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + ',' -%}
                    {%- endif %}
                {% endfor %}    
            {%- endif -%}

            {# When Stream has data logic #}
            {# Source Stream Location and Name #}
            {% if desiredState.config.flagSrcStream == true %}
                {% for source in desiredState.sources %}
                    {% for dep in source.dependencies %}
                        {% if (dep.node.materializationType == 'stream') %}
                            {% set streamStorageLocation = dep.node.location.name %}
                            {% set streamSourceDatabase = desiredState.storageLocations | selectattr('name', 'equalto', streamStorageLocation) | map(attribute='database') | first %}
                            {% set streamSourceSchema = desiredState.storageLocations | selectattr('name', 'equalto', streamStorageLocation) | map(attribute='schema') | first %}
                            {% set streamSourceName = dep.node.name %}

                            {%- if nsVariables.poll == 'WHEN ' -%}
                                {% set nsVariables.poll = nsVariables.poll + 'SYSTEM$STREAM_HAS_DATA(\'"' + streamSourceDatabase + '"."'  + streamSourceSchema + '"."' + streamSourceName + '"\')'  %}
                            {% else %}
                                {% set nsVariables.poll = nsVariables.poll + desiredState.config.multiStreamBehavior + ' SYSTEM$STREAM_HAS_DATA(\'"' + streamSourceDatabase + '"."'  + streamSourceSchema + '"."' + streamSourceName + '"\')'  %}
                            {%- endif -%}
                        {%- endif -%}
                    {% endfor %}
                {% endfor %}
            {% endif -%}

            {# To mimic truncate behavior #}
            {% if desiredState.config.truncateBefore == true %}
                {% set truncateBehavior = 'INSERT OVERWRITE' %}
            {% else %}
                {% set truncateBehavior = 'INSERT' %}
            {% endif -%}

            CREATE OR REPLACE TASK 
                {{ fullyQualifiedTaskName }} 
                {{ taskType}} 
                {{ nsVariables.taskWhenRun }} 
                {% if nsVariables.poll != 'WHEN ' %} {{ nsVariables.poll }} {% endif %}
            AS 
            {{ truncateBehavior }} INTO {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                (
                    {% for col in desiredState.columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
            
                {% for source in desiredState.sources %}
                    /* Combine Sources if needed */
                    {% if loop.first %}
                        SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                        {% for col in desiredState.columns  %}
                            "{{ col.name }}" AS "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        FROM (
                    {% endif %}
                    SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns if not col.isSurrogateKey %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"{% if not loop.last %}, {% endif %}
                    {% endfor %}
                    {{ source.join }}                  
                    {% if not loop.last %}
                        {{ desiredState.config.insertStrategy }}
                    {% endif %}
                    {% if loop.last %}
                        )
                    {% endif %}
                {% endfor %}
                {% if desiredState.config.groupByAll %}GROUP BY ALL{% endif %}
                {{ sortorder_by_colv() }}

            {%- if desiredState.config.schedulePeriodOption != 'Predecessor' -%} 
                {{ stage('Resume Task',true,"sql","create") }}
                ALTER TASK {{ fullyQualifiedTaskName }} RESUME;
            {%- endif -%}       
        {%- endif -%}

{% elif currentState != undefined and desiredState == undefined %}

    {# Target Table Info #}
    {% set targetTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
    {% set targetTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
    {% set fullyQualifiedTargetTableName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

    {% if currentState.config.devMode == false %}
		{% set fullyQualifiedRootTaskName = ref_no_link(currentState.node.location.name, currentState.config.rootTask) %}

        {# Task Info #}
        {% set taskName = currentState.node.name + '_TASK' %}
        {% set fullyQualifiedTaskName = ref_no_link(currentState.node.location.name, taskName) %}
        {%- if currentState.config.schedulePeriodOption == 'Predecessor' -%}
        {{ stage('Suspend Root Task') }}
            ALTER TASK IF EXISTS {{ fullyQualifiedRootTaskName }} SUSPEND
        {{ stage('Drop Current Task') }}
            DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
        {%- else -%}
        {{ stage('Drop Current Task') }}
            DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
        {%- endif -%}
    {%- endif -%}

{% endif %}