{#
    Copyright (c) 2023 Coalesce. All rights reserved.
This script and its associated documentation are confidential and proprietary to Coalesce.
Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
does not permit copying or modification for any other purpose.  
#}
{# == Node Type Version        : 1.2  == #}
{# == Node Type Name           : Dynamic Table Work  == #}
{# == Node Type Description    : This node creates and runs dynamic table work.Materialization type and cluster key added with this version == #}
{#Release date:20231215  Version:1.0#}
{#Release date:20240527  Version:1.1 Released By:AS  Description: Materialization type and cluster key added with this version #}
{#Release date:20241025  Version:1.2 Released By:PM  Description: Materialization type iceberg dynamic table added #}

{% if desiredState == currentState %}

{{ stage('Nothing to do.') }}
select 1 = 0

{% elif desiredState  %}
   {%if  desiredState.node.materializationType == 'transient dynamic table' or  desiredState.node.materializationType == 'dynamic table' %}
    ## Materialization type
    {%if  desiredState.node.materializationType == 'transient dynamic table' %}
          {% set keyword = 'TRANSIENT'  %}
    {%endif%}

    ## Identify all config changes that would cause a CREATE instead of ALTER
    {% if currentState != undefined %} 
        ## General metadata
        
        {% set sourcesTest = currentState.sources | count == desiredState.sources | count %}
        {% set joinTest = currentState.join == desiredState.join %}

            
        {# Test to see if the transform in a column has changed #}
        {# Desired Namespace Variables Transform #}
        {% set desiredTransformArray = desiredState.sources | map(attribute='columns') | first | map(attribute='transform') | list -%}

        {# Test to see if the transform in a column has changed #}
        {# Current Namespace Variables Transform #}
        {% set currentTransformArray = currentState.sources | map(attribute='columns') | first | map(attribute='transform') | list -%}

        {% set columnsTransformTest = currentTransformArray == desiredTransformArray %}

        ## Storage Location Tests
        ## Only need to account for updated Storage Location mappings 
        ## sourceTest handles changed Storage Location Names
        ## Current Namespace Variables

        ## Desired Namespace Variables
        {% set nsVariables = namespace(nsDesiredDepStorageLocations="",nsDesiredSourceStorageLocations="",
        nsDesiredTargetStorageLocations="",
        nsDesiredUsedStorageLocations="",
        storageLocationTest= true,
        descolchanges = 0,
        othercolchanges = 0 ) %}
        
        ## Desired State Storage Location Info
        {% for source in desiredState.sources %}
            {% for dep in source.dependencies %}
                {% set depSourceLocation = dep.node.location.name %}
                {% if loop.first %}
                    {% set nsVariables.nsDesiredDepStorageLocations = depSourceLocation %}
                {% else %}
                    {% set nsVariables.nsDesiredDepStorageLocations = nsVariables.nsDesiredDepStorageLocations + ',' + depSourceLocation %}
                {% endif %}
            {% endfor %}
            
            {% if loop.first %}
                {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredDepStorageLocations %}
            {% else %}
                {% set nsVariables.nsDesiredSourceStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredDepStorageLocations %}
            {% endif %}
        {% endfor %}

        {% set nsVariables.nsDesiredTargetStorageLocations = desiredState.node.location.name  %}

        {% set nsVariables.nsDesiredUsedStorageLocations = nsVariables.nsDesiredSourceStorageLocations + ',' + nsVariables.nsDesiredTargetStorageLocations %}

        {% set desiredStorageLocations = (nsVariables.nsDesiredUsedStorageLocations).split(',') | list %}
        {% set desiredUniqueStorageLocations = desiredStorageLocations | unique | sort | list %}
        {% set currentstoragelocations = currentState.storageLocations | map (attribute='name') | list%}

        ## Storage Location Tests
        ## Only need to account for updated Storage Location mappings
        ## sourceTest handles changed Storage Location Names
        {% set nsVariables.storageLocationTest = true %}
        {% for name in desiredUniqueStorageLocations %}
            ## Current mappings
        
            {%if currentState.storageLocations|length == 0%}
              
              {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | string %}
              {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | string %}
               {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
            {%elif name in currentstoragelocations %}
            
                {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
                {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
                {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}  
            {%endif%}
            
            ## Desired mappings
            {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='database') | first %}
            {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', name) | map(attribute='schema') | first %}
            {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}


            {% if currentDatabaseSchema != desiredDatabaseSchema %}
                {% set nsVariables.storageLocationTest = false %}
            {% endif %}
        {% endfor %}

        ## Config
        {% set insertStrategyTest = currentState.config.insertStrategy == desiredState.config.insertStrategy %}
        {% set groupByAllTest = currentState.config.groupByAll == desiredState.config.groupByAll %}
        {% set selectDistinctTest = currentState.config.selectDistinct == desiredState.config.selectDistinct %}

        ## Node
        {% set nodeNameTest = currentState.node.name == desiredState.node.name %}
        {% set nodeMaterializationType = currentState.node.materializationType == desiredState.node.materializationType %}
        {% set nodeIsMultisource = currentState.node.isMultisource == desiredState.node.isMultisource %}

        ## Refresh_mode test
        {% set refreshTest = currentState.config.refresh_mode == desiredState.config.refresh_mode %}

        ## Initialize test
        {% set initializeTest = currentState.config.initialize == desiredState.config.initialize %}

       
        {# Column description changes and other column level changes #}
            {% for alterCurCol in currentState.columns %}        
                {% if alterCurCol.id in desiredState.columns | map(attribute="id") %}
                     {% set currentColumnName = currentState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='name') | first %}
                    {% set currentDescription = currentState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='description') | first %}
                    {% set currentDatatype = currentState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='dataType') | first %}
                    {% set currentNullable = currentState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='nullable') | first %}
                    {% set currentDefaultValue = currentState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='defaultValue') | first %}
                    
                    {% set desiredColumnName = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='name') | first %}
                    {% set desiredDescription = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='description') | first %}
                    {% set desiredDatatype = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='dataType') | first %}
                    {% set desiredNullable = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='nullable') | first %}
                    {% set desiredDefaultValue = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='defaultValue') | first %}
                        

                   {% set datatypeTest = currentDatatype == desiredDatatype %}
                   {% set nullableTest = currentNullable == desiredNullable %}
                   {% set defaultValueTest = currentDefaultValue == desiredDefaultValue %}
                   {% set descriptionTest = currentDescription == desiredDescription %}
                   {% set columnnameTest = currentColumnName == desiredColumnName %}

                    {% if (descriptionTest == false) %}
                        {% set nsVariables.descolchanges = nsVariables.descolchanges + 1 %}
                    {%endif%}
{#                      Column nullability is not applicable to Dynamic Tables  														#}
{#                     {%if (datatypeTest == false or nullableTest == false or defaultValueTest == false or columnnameTest == false )%} #}
{#                         {% set nsVariables.othercolchanges = nsVariables.othercolchanges + 1 %}                                      #}
{#                     {% endif %} 																										#}
                    {%if (datatypeTest == false or defaultValueTest == false or columnnameTest == false )%}
                    {% set nsVariables.othercolchanges = nsVariables.othercolchanges + 1 %}
                    {% endif %}

                {%endif%}    
            {% endfor %}


        ## If any of the above are false then a CREATE must be run
        
        {% if 
            nsVariables.othercolchanges > 0 or
            sourcesTest == false or
            joinTest == false or
            columnsTransformTest == false or
            insertStrategyTest == false or 
            groupByAllTest == false or 
            selectDistinctTest == false or 
            nodeIsMultisource == false or 
            initializeTest == false or
            refreshTest == false or (currentState.storageLocations | length ==0)  %}    

            {% set createTest = true %}
        {% else %}
            {% set createTest = false %}
        {% endif %}      

    {% endif %}
         

    ## Identify config changes that would only result in ALTER
    {% if createTest == false %}
        {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
            {% set warehouseTest = currentState.config.warehouseName == desiredState.config.warehouseName %}
        {% else %}
            {% set warehouseTest = currentState.parameters.targetDynamicTableWarehouse == desiredState.parameters.targetDynamicTableWarehouse %}
        {% endif %}
        {% set lagSpecificationTest = currentState.config.lagSpecification == desiredState.config.lagSpecification %}
        {% set downstreamOptionTest = currentState.config.downstreamOption == desiredState.config.downstreamOption %}
        {% set nodeCommentTest = currentState.node.description == desiredState.node.description %}

            {# Clustering Test #}
            {% set clusterKeyTest = currentState.config.clusterKey == desiredState.config.clusterKey %}
            {% set clusterKeyExpressionsTest = currentState.config.clusterKeyExpressions == desiredState.config.clusterKeyExpressions %}
            {% set clusterKeyConfigTest = currentState.config.clusterKeyConfig == desiredState.config.clusterKeyConfig %}
            {% set clusterKeyConfigExpressionsTest = currentState.config.clusterKeyConfigExpressions == desiredState.config.clusterKeyConfigExpressions %}

            {% if 
                clusterKeyTest == false or
                clusterKeyExpressionsTest == false or
                clusterKeyConfigTest == false or
                clusterKeyConfigExpressionsTest == false %}

                {% set clusterTest = false %}
            {% else %}
                {% set clusterTest = true %}
            {% endif %}

        {% if 
            warehouseTest == false or
            lagSpecificationTest == false or
            downstreamOptionTest == false or
            nodeCommentTest == false or
            clusterTest == false or 
            nsVariables.descolchanges > 0 or
             nsVariables.storageLocationTest == false or 
             nodeNameTest == false %}    

            {% set alterOnlyTest = true %}
        {% else %}
            {% set alterOnlyTest = false %}
        {% endif %}
    {% endif %}

    ## CREATE or ALTER
    {% if (currentState == undefined) or (createTest == true and desiredState.node.materializationType == currentState.node.materializationType) %}      

        ## Materialization type
        {%if  desiredState.node.materializationType == 'transient dynamic table' %}
          {% set keyword = 'TRANSIENT'  %}
        {%endif%}
         

        {# Figure out cluster key #}
        {% set nsVariables = namespace(finalClusterKey="") %}
        {% if desiredState.config.clusterKey == true %}
            {% if desiredState.config.clusterKeyExpressions == true %}
                {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                {%- set nsVariables = namespace(clusterValues=[]) %}

                {% for r in column %}
                    {% if expression[loop.index0] == "" or expression[loop.index0] is undefined %}

                        {% set nsVariables.clusterValues = nsVariables.clusterValues + ['"'+r+'"'] %}
					     
                       {% else %}

                       {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}        
                                         
						 
                    {% endif %}
                {% endfor %}

                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

            {% else %}

                {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                {%- set nsVariables = namespace(clusterValues=[]) %}

                 {% for r in column %}
                       {% set nsVariables.clusterValues = nsVariables.clusterValues + ['"'+r+'"'] %}
                {% endfor %}

                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

            {% endif %}
        {% endif %}

         
        {%if  desiredState.node.materializationType == 'transient dynamic table' %}
          {% set keyword = 'TRANSIENT'  %}
        {%endif%}


        ## Dynamic Table Name
        {% set targetDynamicTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
        {% set targetDynamicTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
        {% set fullyQualifiedTargetDynamicTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

        ## Warehouse
        ## Can be updated during deployment via a parameter to account for different warehouse names in different deployments
        {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
            {% set dynamicTableWarehouse = desiredState.config.warehouseName %}
        {% else %}
            {% set dynamicTableWarehouse = desiredState.parameters.targetDynamicTableWarehouse %}
        {% endif %}

        ## Downstream Option or Lag Specification
        {% if desiredState.config.downstreamOption == true %}
            {% set dynamicTableLagSpecification = 'DOWNSTREAM' %}
        {% else %}
            {% set dynamicTableLagValue = desiredState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
            {% set dynamicTableLagValuePeriod = desiredState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

            {% set dynamicTableLagSpecification = dynamicTableLagValue ~ ' ' ~ dynamicTableLagValuePeriod %}
        {% endif %}

        ## Refresh-type option
        {% set dynamicTablerefresh = desiredState.config.refresh_mode %}

        ##Initialize option
        {% set dynamicTableinitialize = desiredState.config.initialize %}

        ## Node description
        {%- if desiredState.node.description | length > 0 %} 
            {% set dynamicTableComment = "COMMENT = " + "'" + desiredState.node.description |escape + "'" %}
        {% endif %}
        
        {% if nsVariables.storageLocationTest == false or 
             nodeNameTest == false  %}
             
             ## Current Dynamic Table Name 

           {% set currentTargetDynamicTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
           {% set currentTargetDynamicTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
           {% set currentFullyQualifiedTargetDynamicTableName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

                {{ stage('Drop Dynamic Table at old location/name', true, "sql", "alter") }}
                  DROP DYNAMIC TABLE IF EXISTS {{currentFullyQualifiedTargetDynamicTableName}}
        {%endif%}

        {{ stage('Create Work '+ '{{ desiredState.node.materializationType }}', true, "sql", "create") }}
        CREATE OR REPLACE {{ keyword }} DYNAMIC TABLE {{ fullyQualifiedTargetDynamicTableName }}
            TARGET_LAG = '{{ dynamicTableLagSpecification }}'
            WAREHOUSE = {{dynamicTableWarehouse}}
            REFRESH_MODE   = {{dynamicTablerefresh}}
            INITIALIZE = {{dynamicTableinitialize}}
            {{ dynamicTableComment  }}
        (
            {% for col in desiredState.columns %}
                "{{ col.name }}"
                {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                {%- if not loop.last -%}, {% endif %}
            {% endfor %}
        )
        AS
        {% for source in desiredState.sources %}
            SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
            {% for col in source.columns %}
                {{ get_source_transform(col) }} AS "{{ col.name }}"
                {%- if not loop.last -%}, {% endif %}
            {% endfor %}

            {{ source.join }}
            {% if desiredState.config.groupByAll %} GROUP BY ALL {% endif %}

            {% if not loop.last %}
                {% if desiredState.config.insertStrategy in ['UNION', 'UNION ALL'] %}
                    {{ desiredState.config.insertStrategy }}
                {% endif %}
            {% endif %}
        {% endfor %}
        

                {% if desiredState.config.clusterKey == true %}
                  {{ stage('Apply Table Clustering', true, "sql", "create") }}
                 ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} {{ nsVariables.finalClusterKey }}

                   {{ stage('Resume Recluster Table', true, "sql", "create") }}
                  ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} RESUME RECLUSTER

               {% endif %}

    {% elif (currentState != undefined and desiredState != undefined) and (alterOnlyTest == true and desiredState.node.materializationType == currentState.node.materializationType) %}

        ## Desired Dynamic Table Name
        {% set desiredTargetDynamicTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
        {% set desiredTargetDynamicTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
        {% set desiredFullyQualifiedTargetDynamicTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

        ## Current Dynamic Table Name 

        {% set currentTargetDynamicTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
        {% set currentTargetDynamicTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
        {% set currentFullyQualifiedTargetDynamicTableName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

        ## Desired Warehouse
        {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
            {% set desiredDynamicTableWarehouse = desiredState.config.warehouseName %}
        {% else %}
            {% set desiredDynamicTableWarehouse = desiredState.parameters.targetDynamicTableWarehouse %}
        {% endif %}


        ## Desired Downstream Option or Lag Specification
        {% if desiredState.config.downstreamOption == true %}
            {% set desiredDynamicTableLagSpecification = 'DOWNSTREAM' %}
        {% else %}
            {% set desiredDynamicTableLagValue = desiredState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
            {% set desiredDynamicTableLagValuePeriod = desiredState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

            {% set desiredDynamicTableLagSpecification = desiredDynamicTableLagValue ~ ' ' ~ desiredDynamicTableLagValuePeriod %}
        {% endif %}



        ## Current Warehouse
        {% if currentState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
            {% set currentDynamicTableWarehouse = currentState.config.warehouseName %}
        {% else %}
            {% set currentDynamicTableWarehouse = currentState.parameters.targetDynamicTableWarehouse %}
        {% endif %}

        ## Current Downstream Option or Lag Specification
        {% if currentState.config.downstreamOption == true %}
            {% set currentDynamicTableLagSpecification = 'DOWNSTREAM' %}
        {% else %}
            {% set currentDynamicTableLagValue = currentState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
            {% set currentDynamicTableLagValuePeriod = currentState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

            {% set currentDynamicTableLagSpecification = currentDynamicTableLagValue ~ ' ' ~ currentDynamicTableLagValuePeriod %}
        {% endif %}


        ## ALTER for Warehouse if necessary
        {% set dynamicTableWarehouse = '' %}
        {% if desiredDynamicTableWarehouse != currentDynamicTableWarehouse %}
            {% set dynamicTableWarehouse = 'WAREHOUSE = ' + desiredDynamicTableWarehouse %}
        {% endif %}

        ## Alter for Target lag if necessary
        {% set dynamicTableLagSpecification = '' %}
        {% if desiredDynamicTableLagSpecification != currentDynamicTableLagSpecification %}
            {% if desiredDynamicTableLagSpecification == 'DOWNSTREAM' %}
                {% set dynamicTableLagSpecification = 'TARGET_LAG = DOWNSTREAM' %}
            {% else %}
                {% set dynamicTableLagSpecification = 'TARGET_LAG = ' + '\'' + desiredDynamicTableLagSpecification + '\'' %}
            {% endif %}
        {% endif %}

        {%- if desiredState.node.description | length > 0 %} 
            {% set dynamicTableComment = "COMMENT = " + "'" + desiredState.node.description |escape + "'" %}
        {% endif %}

             {# Change in storage mappings,target location or node name #}
         {% if nsVariables.storageLocationTest == false or 
             nodeNameTest == false  %}
                {{ stage('Alter Dynamic Table', true, "sql", "alter") }}
				{% set srcSchName = currentState.node.location.name %}
                {% set cdb = currentState.storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='database') | first %}
                {% set csch = currentState.storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='schema') | first %}
                  ALTER DYNAMIC TABLE IF EXISTS  "{{cdb}}"."{{csch}}"."{{currentState.node.name}}" RENAME TO {{ desiredFullyQualifiedTargetDynamicTableName }}
          {%endif%}
 

            {# Figure out cluster key #}
            {% set nsVariables = namespace(finalClusterKey="",clusterValues=[]) %}
            {% if clusterTest == false %}
                {% if desiredState.config.clusterKeyExpressions == true %}
                    {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                    {% for r in column %}
                        {% if expression[loop.index0] == "" or expression[loop.index0] is undefined%}
                            {% set nsVariables.clusterValues = nsVariables.clusterValues + ['"'+r+'"']%}
                        {% else %}
                            {% set nsVariables.clusterValues = nsVariables.clusterValues +[expression[loop.index0]] %}
                        {% endif %}
                    {% endfor %}

                    {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

                {% elif desiredState.config.clusterKey == true %}

                    {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                    {% for r in column %}
                        {% set nsVariables.clusterValues = nsVariables.clusterValues + ['"'+r+'"']%}
                    {% endfor %}

                    {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}
                
                {% else %}

                    {% set nsVariables.finalClusterKey = 'DROP CLUSTERING KEY' %}

                {% endif %}

                {{ stage('Recluster TABLE', true, "sql", "alter") }}
                ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                {{ nsVariables.finalClusterKey }}

            {% endif %}
            
        {# Change in column description #}
            
            {% for alterCurCol in currentState.columns %}        
                {% if alterCurCol.id in desiredState.columns | map(attribute="id") %}
              
                    {% set currentDescription = alterCurCol.description %}

                    {% set desiredColumnName = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='name') | first %}
                    {% set desiredDescription = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='description') | first %}

                    {% set descriptionTest = currentDescription == desiredDescription %}

                    {% if (descriptionTest == false) %}
                    {{ stage('Alter Dynamic Table', true, "sql", "alter") }}
                       ALTER DYNAMIC TABLE {{ desiredFullyQualifiedTargetDynamicTableName }} MODIFY COLUMN {{desiredColumnName}} COMMENT '{{desiredDescription }}'
                    {% endif %}

                {%endif%}    
            {% endfor %}

           


        {% if  warehouseTest == false or lagSpecificationTest == false or downstreamOptionTest == false or nodeCommentTest == false %}
           {{ stage('Alter Dynamic Table', true, "sql", "alter") }}
           ALTER DYNAMIC TABLE {{ desiredFullyQualifiedTargetDynamicTableName }} SET
            {{ dynamicTableWarehouse }}
            {{ dynamicTableLagSpecification }}
            {{ dynamicTableComment }}      
           
        {%endif%}

          {{ stage('Refresh Dynamic Table', true, "sql", "alter") }}
           ALTER DYNAMIC TABLE {{ desiredFullyQualifiedTargetDynamicTableName }} REFRESH
        

    {%elif (currentState != undefined and desiredState.node.materializationType != currentState.node.materializationType and desiredState != undefined) %}
        
        {# Figure out cluster key #}
        {% set nsVariables = namespace(finalClusterKey="") %}
        {% if desiredState.config.clusterKey == true %}
            {% if desiredState.config.clusterKeyExpressions == true %}
                {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                {%- set nsVariables = namespace(clusterValues=[]) %}

                {% for r in column %}
                    {% if expression[loop.index0] == "" or expression[loop.index0] is undefined%}
                        {% set nsVariables.clusterValues = nsVariables.clusterValues + ['"'+r+'"'] %}
                    {% else %}
                        {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                    {% endif %}
                {% endfor %}

                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

            {% else %}

                {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                {%- set nsVariables = namespace(clusterValues=[]) %}

                {% for r in column %}
                    {% set nsVariables.clusterValues = nsVariables.clusterValues + ['"'+r+'"']%}
                {% endfor %}

                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

            {% endif %}
        {% endif %}

        ## Materialization type
        {%if  desiredState.node.materializationType == 'transient dynamic table' %}
          {% set keyword = 'TRANSIENT'  %}
        {%endif%}

        
        ## Dynamic Table Name
        {% set targetDynamicTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
        {% set targetDynamicTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
        {% set fullyQualifiedTargetDynamicTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}
        {% set parts = fullyQualifiedTargetDynamicTableName.split('.') %}
        {% set new_table_name =  '"' ~ parts[-1].strip('"')~ '_NEW"' %}
        {% set parts = parts[:-1] + [new_table_name] %} 
        {% set fullyQualifiedTargetDynamicTableNamenew = '.'.join(parts) %}

        ## Current Dynamic Table Name
        {% set ctargetDynamicTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
        {% set ctargetDynamicTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
        {% set cfullyQualifiedTargetDynamicTableName = ref_no_link(currentState.node.location.name, currentState.node.name) %}
        {% set parts = cfullyQualifiedTargetDynamicTableName.split('.') %}
        {% set new_table_name =  '"' ~ parts[-1].strip('"')~ '_NEW"' %}
        {% set parts = parts[:-1] + [new_table_name] %} 
        {% set cfullyQualifiedTargetDynamicTableNamenew = '.'.join(parts) %}

        ## Warehouse
        ## Can be updated during deployment via a parameter to account for different warehouse names in different deployments
        {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
            {% set dynamicTableWarehouse = desiredState.config.warehouseName %}
        {% else %}
            {% set dynamicTableWarehouse = desiredState.parameters.targetDynamicTableWarehouse %}
        {% endif %}

        ## Downstream Option or Lag Specification
        {% if desiredState.config.downstreamOption == true %}
            {% set dynamicTableLagSpecification = 'DOWNSTREAM' %}
        {% else %}
            {% set dynamicTableLagValue = desiredState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
            {% set dynamicTableLagValuePeriod = desiredState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

            {% set dynamicTableLagSpecification = dynamicTableLagValue ~ ' ' ~ dynamicTableLagValuePeriod %}
        {% endif %}

        ## Refresh-type option
        {% set dynamicTablerefresh = desiredState.config.refresh_mode %}

        ##Initialize option
        {% set dynamicTableinitialize = desiredState.config.initialize %}

        ## Node description
        {%- if desiredState.node.description | length > 0 %} 
            {% set dynamicTableComment = "COMMENT = " + "'" + desiredState.node.description | escape + "'" %}
        {% endif %}
      
        {%if currentState.node.materializationType == 'dynamic table' and desiredState.node.materializationType == 'transient dynamic table' and createTest == false %}
          
        {%if  desiredState.node.materializationType == 'transient dynamic table' %}
          {% set keyword = 'TRANSIENT'  %}
        {%endif%}


           ## Desired Dynamic Table Name
        {% set desiredTargetDynamicTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
        {% set desiredTargetDynamicTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
        {% set desiredFullyQualifiedTargetDynamicTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

        ## Desired Warehouse
        {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
            {% set desiredDynamicTableWarehouse = desiredState.config.warehouseName %}
        {% else %}
            {% set desiredDynamicTableWarehouse = desiredState.parameters.targetDynamicTableWarehouse %}
        {% endif %}


        ## Desired Downstream Option or Lag Specification
        {% if desiredState.config.downstreamOption == true %}
            {% set desiredDynamicTableLagSpecification = 'DOWNSTREAM' %}
        {% else %}
            {% set desiredDynamicTableLagValue = desiredState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
            {% set desiredDynamicTableLagValuePeriod = desiredState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

            {% set desiredDynamicTableLagSpecification = desiredDynamicTableLagValue ~ ' ' ~ desiredDynamicTableLagValuePeriod %}
        {% endif %}

        ## Current Warehouse
        {% if currentState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
            {% set currentDynamicTableWarehouse = currentState.config.warehouseName %}
        {% else %}
            {% set currentDynamicTableWarehouse = currentState.parameters.targetDynamicTableWarehouse %}
        {% endif %}

        ## Current Downstream Option or Lag Specification
        {% if currentState.config.downstreamOption == true %}
            {% set currentDynamicTableLagSpecification = 'DOWNSTREAM' %}
        {% else %}
            {% set currentDynamicTableLagValue = currentState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
            {% set currentDynamicTableLagValuePeriod = currentState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

            {% set currentDynamicTableLagSpecification = currentDynamicTableLagValue ~ ' ' ~ currentDynamicTableLagValuePeriod %}
        {% endif %}


        ## ALTER for Warehouse if necessary
        {% set dynamicTableWarehouse = '' %}
        {% if desiredDynamicTableWarehouse != currentDynamicTableWarehouse %}
            {%set  warehouseTest = false %}
            {% set dynamicTableWarehouse = 'WAREHOUSE = ' + desiredDynamicTableWarehouse %}
        {% endif %}

        ## Alter for Target lag if necessary
        {% set dynamicTableLagSpecification = '' %}
        {% if desiredDynamicTableLagSpecification != currentDynamicTableLagSpecification %}
            {%set lagSpecificationTest = false%}
            {% if desiredDynamicTableLagSpecification == 'DOWNSTREAM' %}
                {% set dynamicTableLagSpecification = 'TARGET_LAG = DOWNSTREAM' %}
            {% else %}
                {% set dynamicTableLagSpecification = 'TARGET_LAG = ' + '\'' + desiredDynamicTableLagSpecification + '\'' %}
            {% endif %}
        {% endif %}

            #Materialization type change from dynamic table to transient dynamic table

        {%if (currentState.node.name != desiredState.node.name) or (desiredState.node.location.name !=  currentState.node.location.name) or nsVariables.storageLocationTest == false%}
             {{ stage('Clone Work node', true, "sql", "alter") }}
             CREATE OR REPLACE {{ keyword }} DYNAMIC TABLE {{ fullyQualifiedTargetDynamicTableName }} clone {{cfullyQualifiedTargetDynamicTableName }}

             {{ stage('Swap Work node', true, "sql", "alter") }}
             ALTER DYNAMIC TABLE {{ fullyQualifiedTargetDynamicTableName }} SWAP WITH {{cfullyQualifiedTargetDynamicTableName}}

             {{ stage('Drop '+ '{{currentState.node.materializationType}}', true, "sql", "alter") }}
              DROP DYNAMIC TABLE IF EXISTS {{cfullyQualifiedTargetDynamicTableName}}

           {%else%}
             {{ stage('Clone Work node', true, "sql", "alter") }}
             CREATE OR REPLACE {{ keyword }} DYNAMIC TABLE {{ fullyQualifiedTargetDynamicTableNamenew }} clone {{fullyQualifiedTargetDynamicTableName }}

             {{ stage('Swap Work node', true, "sql", "alter") }}
             ALTER DYNAMIC TABLE {{ fullyQualifiedTargetDynamicTableName }} SWAP WITH {{fullyQualifiedTargetDynamicTableNamenew }}

             {{ stage('Drop '+ '{{currentState.node.materializationType}}', true, "sql", "alter") }}
              DROP DYNAMIC TABLE IF EXISTS {{fullyQualifiedTargetDynamicTableNamenew}}

           {%endif%}
           
             {# Change in column description #}
            
            {% for alterCurCol in currentState.columns %}        
                {% if alterCurCol.id in desiredState.columns | map(attribute="id") %}
              
                    {% set currentDescription = alterCurCol.description %}

                    {% set desiredColumnName = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='name') | first %}
                    {% set desiredDescription = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='description') | first %}

                    {% set descriptionTest = currentDescription == desiredDescription %}

                    {% if (descriptionTest == false) %}
                    {{ stage('Alter Dynamic Table', true, "sql", "alter") }}
                       ALTER DYNAMIC TABLE {{ desiredFullyQualifiedTargetDynamicTableName }} MODIFY COLUMN {{desiredColumnName}} COMMENT '{{desiredDescription | escape}}'
                    {% endif %}

                {%endif%}    
            {% endfor %}

           
          {% if clusterTest == false %}
		 
                  {{ stage('Recluster TABLE', true, "sql", "alter") }}
                ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                {{ nsVariables.finalClusterKey }}

         {%endif%}
		 
             {% if  warehouseTest == false or lagSpecificationTest == false or downstreamOptionTest == false or nodeCommentTest == false %}
                
                {{ stage('Alter Dynamic Table', true, "sql", "alter") }}
                 ALTER DYNAMIC TABLE {{fullyQualifiedTargetDynamicTableName }} SET
                 {{ dynamicTableWarehouse }}
                 {{ dynamicTableLagSpecification }}
                 {{ dynamicTableComment}}
        
              
             {%endif%}
        
              {{ stage('Refresh Dynamic Table', true, "sql", "alter") }}
               ALTER DYNAMIC TABLE {{fullyQualifiedTargetDynamicTableName }} REFRESH

        {%elif (currentState.node.materializationType == 'transient dynamic table' and desiredState.node.materializationType == 'dynamic table') or
        (currentState.node.materializationType == 'dynamic table' and desiredState.node.materializationType == 'transient dynamic table' ) %}
            
            ## Materialization type
            {%if  desiredState.node.materializationType == 'transient dynamic table' %}
                {% set keyword = 'TRANSIENT'  %}
            {%endif%}

                {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node. location.name, currentState.node.name), true, "sql", "alter") }}
                DROP DYNAMIC TABLE IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}

                {{ stage('Create Work '+ '{{ desiredState.node.materializationType }}', true, "sql", "alter") }}
               CREATE OR REPLACE {{ keyword }} DYNAMIC TABLE {{ fullyQualifiedTargetDynamicTableName }}
                TARGET_LAG = '{{ dynamicTableLagSpecification }}'
                WAREHOUSE = {{dynamicTableWarehouse}}
                REFRESH_MODE   = {{dynamicTablerefresh}}
                INITIALIZE = {{dynamicTableinitialize}}
            {{ dynamicTableComment }}
           (
            {% for col in desiredState.columns %}
                "{{ col.name }}"
                {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                {%- if not loop.last -%}, {% endif %}
            {% endfor %}
           )
          AS
            {% for source in desiredState.sources %}
              SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
               {% for col in source.columns %}
                {{ get_source_transform(col) }} AS "{{ col.name }}"
                {%- if not loop.last -%}, {% endif %}
               {% endfor %}

              {{ source.join }}
               {% if desiredState.config.groupByAll %} GROUP BY ALL {% endif %}
              {% if not loop.last %}
                {% if desiredState.config.insertStrategy in ['UNION', 'UNION ALL'] %}
                    {{ desiredState.config.insertStrategy }}
                {% endif %}
              {% endif %}
            {% endfor %}

           

        {%endif%}   
          

            {% if desiredState.config.clusterKey == true %}
                  {{ stage('Apply Table Clustering', true, "sql", "alter") }}
                 ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} {{ nsVariables.finalClusterKey }}

                   {{ stage('Resume Recluster Table', true, "sql", "alter") }}
                  ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }} RESUME RECLUSTER

            {%endif%}

    {% else %}
        {{ stage('Nothing to do.') }}
        select 1 = 0
    
    {% endif %}

   {%elif  desiredState.node.materializationType == 'iceberg dynamic table' %}

       ## Materialization type
		{% set keyword = 'ICEBERG'  %}

        {# Figure out cluster key #}
        {% set nsVariables = namespace(finalClusterKey="") %}
        {% if desiredState.config.clusterKey == True %}
            {% if desiredState.config.clusterKeyExpressions == True %}
                {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                {%- set nsVariables = namespace(clusterValues=[]) %}

                {% for r in column %}
                    {% if expression[loop.index0] == "" or expression[loop.index0] is undefined %}

                        {% set nsVariables.clusterValues = nsVariables.clusterValues + ['"'+r+'"'] %}
					     
                       {% else %}

                       {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}        
                                         
						 
                    {% endif %}
                {% endfor %}

                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

            {% else %}

                {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                {%- set nsVariables = namespace(clusterValues=[]) %}

                 {% for r in column %}
                       {% set nsVariables.clusterValues = nsVariables.clusterValues + ['"'+r+'"'] %}
                {% endfor %}

                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

            {% endif %}
        {% endif %}

        ## Dynamic Table Name
        {% set targetDynamicTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
        {% set targetDynamicTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
        {% set fullyQualifiedTargetDynamicTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

        ## Warehouse
        ## Can be updated during deployment via a parameter to account for different warehouse names in different deployments
        {% if desiredState.parameters.targetDynamicTableWarehouse == 'DEV ENVIRONMENT' %}
            {% set dynamicTableWarehouse = desiredState.config.warehouseName %}
        {% else %}
            {% set dynamicTableWarehouse = desiredState.parameters.targetDynamicTableWarehouse %}
        {% endif %}

        ## Downstream Option or Lag Specification
        {% if desiredState.config.downstreamOption == true %}
            {% set dynamicTableLagSpecification = 'DOWNSTREAM' %}
        {% else %}
            {% set dynamicTableLagValue = desiredState.config.lagSpecification.get('items') | map(attribute='lagValue') | first %}
            {% set dynamicTableLagValuePeriod = desiredState.config.lagSpecification.get('items') | map(attribute='lagPeriod') | first %}

            {% set dynamicTableLagSpecification = dynamicTableLagValue ~ ' ' ~ dynamicTableLagValuePeriod %}
        {% endif %}

        ## Refresh-type option
        {% set dynamicTablerefresh = desiredState.config.refresh_mode %}
        ##Initialize option
        {% set dynamicTableinitialize = desiredState.config.initialize %}
        ##External Volume option
        {% set dynamicTableexternalVolume = desiredState.config.externalVolume %}
        ##Base Location option
        {% set dynamicTablebaseLocation = desiredState.config.baseLocation %}
        ## Node description
        {%- if desiredState.node.description | length > 0 %} 
            {% set dynamicTableComment = "COMMENT = " + "'" + desiredState.node.description |escape + "'" %}
        {% endif %}

         {%- if currentState!=undefined %} 
		 {%- if  (currentState.node.materializationType == 'dynamic table' or currentState.node.materializationType == 'transient dynamic table')%} 
           {% set currentTargetDynamicTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
           {% set currentTargetDynamicTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
           {% set currentFullyQualifiedTargetDynamicTableName = ref_no_link(currentState.node.location.name, currentState.node.name) %}
           {{ stage('Drop Dynamic Table '+'{{ fullyQualifiedTargetDynamicTableName }}', true, "sql", "alter") }}
            DROP DYNAMIC TABLE IF EXISTS {{ fullyQualifiedTargetDynamicTableName }}        
		 {% endif %}        
         {% endif %}


		{% if nsVariables.storageLocationTest == false or 
             nodeNameTest == false  %}
             
             ## Current Dynamic Table Name 

           {% set currentTargetDynamicTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
           {% set currentTargetDynamicTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
           {% set currentFullyQualifiedTargetDynamicTableName = ref_no_link(currentState.node.location.name, currentState.node.name) %}
           {{ stage('Drop Dynamic Table at old location/name', true, "sql", "alter") }}
            DROP DYNAMIC TABLE IF EXISTS {{ fullyQualifiedTargetDynamicTableName }}
        {%endif%}
		

        {{ stage('Create Work '+ '{{ desiredState.node.materializationType }}', true, "sql", "create") }}

        CREATE OR REPLACE DYNAMIC {{ keyword }} TABLE {{ fullyQualifiedTargetDynamicTableName }}
            TARGET_LAG = '{{ dynamicTableLagSpecification }}'
            WAREHOUSE = {{dynamicTableWarehouse}}
            REFRESH_MODE   = {{dynamicTablerefresh}}
            INITIALIZE = {{dynamicTableinitialize}}
			{{nsVariables.finalClusterKey }}
			EXTERNAL_VOLUME = {{dynamicTableexternalVolume}}
			CATALOG = 'SNOWFLAKE'
			BASE_LOCATION = {{dynamicTablebaseLocation}}
			
            {{ dynamicTableComment  }}
        (
            {% for col in desiredState.columns %}
                "{{ col.name }}"
                {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                {%- if not loop.last -%}, {% endif %}
            {% endfor %}
        )
        AS
        {% for source in desiredState.sources %}
            SELECT {% if desiredState.config.selectDistinct %} DISTINCT {% endif %}
            {% for col in source.columns %}
                {{ get_source_transform(col) }} AS "{{ col.name }}"
                {%- if not loop.last -%}, {% endif %}
            {% endfor %}

            {{ source.join }}
            {% if desiredState.config.groupByAll %} GROUP BY ALL {% endif %}

            {% if not loop.last %}
                {% if desiredState.config.insertStrategy in ['UNION', 'UNION ALL'] %}
                    {{ desiredState.config.insertStrategy }}
                {% endif %}
            {% endif %}
        {% endfor %}
   {% endif %}      
{% elif currentState != undefined and desiredState == undefined %}

    ## Dynamic Table Name
    {% set targetDynamicTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
    {% set targetDynamicTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
    {% set fullyQualifiedTargetDynamicTableName = ref_no_link(currentState.node.location.name, currentState.node.name) %}

    {{ stage('Drop ' + '{{currentState.node.materializationType}}', true, "sql", "drop") }}
    DROP DYNAMIC TABLE IF EXISTS {{ fullyQualifiedTargetDynamicTableName }}


{%- else -%}

    {{ stage('Nothing to do.') }}
      select 1 = 0

{% endif %}
