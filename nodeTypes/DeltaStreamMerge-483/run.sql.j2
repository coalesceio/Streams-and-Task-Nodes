{# Copyright (c) 2023 Coalesce. All rights reserved.
This script and its associated documentation are confidential and proprietary to Coalesce.
Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
Coalesce permits you to copy and modify this script for the purposes of using with Coalesce but
does not permit copying or modification for any other purpose.  
#}
{# == Node Type Name           : Delta Stream Merge == #}
{# == Node Type Description    : This node creates and deploys a stream on top of a table, view or dynamic table.Also provides option to create a target table/transient  able to merge data handling both inserts and deletes from source with a task on top of it.
== #}

{# Development mode -To test the SQL the task will execute to make sure it runs without errors and returns the expected data #}

{% if config.devMode == true %}
     
     {% set nsVariables = namespace() %}
     {# Source Object Location and Name #}
     
     {% set ns = namespace(sourceStorageLocation ="",sourceTableName ="") %}  
      {% for dependency in sources[0].dependencies %}
        {% if dependency.node.materializationType != 'task' %} 
            {% set ns.sourceStorageLocation = dependency.node.location.name %}
            {% set ns.sourceTableName = dependency.node.name %}
        {% endif %}
      {% endfor %}

    {% set sourceDatabaseName = storageLocations | selectattr('name', 'equalto', ns.sourceStorageLocation) | map(attribute='database') | first %}
    {% set sourceSchemaName = storageLocations | selectattr('name', 'equalto', ns.sourceStorageLocation) | map(attribute='schema') | first %}
	

    {% set fullyQualifiedSourceTableName = '"' + sourceDatabaseName + '"."' + sourceSchemaName + '"."' + ns.sourceTableName + '"' %}
    {% set refLink = "{{ ref('" + ns.sourceStorageLocation + "', '" + ns.sourceTableName + "') }}" %}

    {# Target Stream Location and Name #}
    {% set streamTargetLocationName = node.location.name %}
    {% set streamTargetDatabaseName = storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
    {% set streamTargetSchemaName = storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
    {% set streamName = node.name + '_STREAM' %}
    {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}

    {# Target Table Info #}
    {% set targetTableDatabase = ref_no_link(node.location.name, node.name).split('.')[0] %} 
    {% set targetTableSchema = ref_no_link(node.location.name, node.name).split('.')[1] %} 
    {% set fullyQualifiedTargetTableName = ref_no_link(node.location.name, node.name) %}
    {% set targetTableName = node.name %}

    {% set tableColumnIds = columns | map(attribute='id') | list %}
    {% set tableColumnNames = columns | map(attribute='name') | list %}
    
    {# Split the FROM clause if it contains an ORDER BY to ensure the correct order. #}
    {% set ret_clause = get_clause(sources[0].join).lstrip() %}
    {% set upper_query = ret_clause | upper %}
    {% if 'ORDER BY' in upper_query %}
        {% set index = upper_query.find('ORDER BY') %}
        {% set before_order_by = ret_clause[:index] %}
        {% set after_order_by = ret_clause[index:] %}
        {% set ret_clause = before_order_by %}
    {% else %}
        {% set before_order_by = ret_clause %}
        {% set after_order_by = '' %}
    {% endif %}
    
    {# Check if the WHERE clause contains column aliases and replace them with the correct stream name #}
    {% set modified_string = namespace(value="") %}
    {% set words = ret_clause.split() %}
    {% for word in words %}
        {% if '.' in word %}
            {% set parts = word.split('.') %}
            {% set modified_word = streamName ~ "." ~ parts[1] %}
            {# set modified_word = modified_word.replace('"', "") #}
        {% else %}
            {% set modified_word = word %}
        {% endif %}
        {% set modified_string.value = modified_string.value ~ " " ~ modified_word %}
    {% endfor %}
    {% set ret_clause = modified_string.value %}

    {# partition by and order by #}
    {% set tableColumnNamesUpdate = tableColumnNames | reject('in', config.partitionBy.get('items') | map(attribute='partColName.name')) | list %}
    
    {% for i in config.partitionBy.get('items') %}
        {% if loop.first %}
            {% set nsVariables.partition = '"' + i.partColName.name + '"' %}
        {% else %}
            {% set nsVariables.partition = nsVariables.partition + ', "' + i.partColName.name + '"' %}
        {% endif %}

        {% set tableColumnNamesUpdate = tableColumnNames | reject('in', i.partColName.name) | list %}
    {% endfor %}           

    {% for i in config.orderBy.get('items') %}
        {% if loop.first %}
            {% set nsVariables.orderBy = '"' + i.colName.name + '" ' + i.sortOrd %}
        {% else %}
            {% set nsVariables.orderBy = nsVariables.orderBy + ', "' + i.colName.name + '" ' + i.sortOrd %}
        {% endif %}
    {% endfor %}
    
    {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}
    {% set nsVariables.tableKey = config.partitionBy.get('items') %}
    {% set nsVariables.tableKey = nsVariables.tableKey | map(attribute='partColName.name') | list %}


    {{ stage('Delta Stream Merge') }}
    
    BEGIN
        BEGIN TRANSACTION;
            {# First MERGE: Handle DELETEs (both standalone and DELETE portion of UPDATEs) #}
            MERGE INTO {{ fullyQualifiedTargetTableName }} tgt USING
            -- Select Statement Preparing Data for Merge - DELETE Operations
            (SELECT  
                    {% for id in tableColumnIds %}

                        {% set columnTransformation = sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='transform') | first -%}
                        {%- if columnTransformation == "" -%}
                        {% set col =  sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='sourceColumns') | first  |  map(attribute='column')  | list |  map(attribute='name') | first   -%}
                        "{{ col }}" as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                        {%- else -%}
                        {% set col = sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='name') | first -%}
                        {{ columnTransformation | replace(ns.sourceTableName, streamName) }} as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                        {%- endif %}
                    {%- endfor %}
                    ,"METADATA$ACTION" AS METADATA$ACTION,
                    "METADATA$ISUPDATE" AS METADATA$ISUPDATE    
            FROM {{ ref(streamTargetLocationName, streamName) }}
            WHERE METADATA$ACTION = 'DELETE'
            AND   METADATA$ISUPDATE = FALSE

            {% set join_clause = ret_clause.lstrip() | replace("AND ", "WHERE ", 1) if ret_clause.lstrip().startswith("AND ") else ret_clause %}
            {% if join_clause.strip() != "" %}
                AND ({{ join_clause }})
            {% endif %}
            QUALIFY {{ nsVariables.rowNumber }} = 1
            {{after_order_by}}
            ) src
            
            -- Join Condition
            ON {% for col in nsVariables.tableKey -%}
                src."{{ col }}" = tgt."{{ col }}"
            {% if not loop.last %} AND {% endif %}
                {%- endfor -%}

            -- Handle all DELETE operations (standalone deletes and DELETE portion of updates)
            WHEN MATCHED AND METADATA$ACTION = 'DELETE'
            THEN DELETE;

            {# Second MERGE: Handle INSERTs and UPDATEs #}
            MERGE INTO {{ fullyQualifiedTargetTableName }} tgt USING
            -- Select Statement Preparing Data for Merge - INSERT/UPDATE Operations
            (SELECT  
                    {% for id in tableColumnIds %}

                        {% set columnTransformation = sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='transform') | first -%}
                        {%- if columnTransformation == "" -%}
                        {% set col =  sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='sourceColumns') | first  |  map(attribute='column')  | list |  map(attribute='name') | first   -%}
                        "{{ col }}" as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                        {%- else -%}
                        {% set col = sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='name') | first -%}
                        {{ columnTransformation | replace(ns.sourceTableName, streamName) }} as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                        {%- endif %}
                    {%- endfor %}
                    ,"METADATA$ACTION" AS METADATA$ACTION,
                    "METADATA$ISUPDATE" AS METADATA$ISUPDATE    
            FROM {{ ref(streamTargetLocationName, streamName) }}
            WHERE METADATA$ACTION = 'INSERT'

            {% if join_clause.strip() != "" %}
                AND ({{ join_clause }})
            {% endif %}
            QUALIFY {{ nsVariables.rowNumber }} = 1
            {{after_order_by}}
            ) src
            
            -- Join Condition
            ON {% for col in nsVariables.tableKey -%}
                src."{{ col }}" = tgt."{{ col }}"
            {% if not loop.last %} AND {% endif %}
                {%- endfor -%}

            -- What to do if data is matched based on table key
            WHEN MATCHED AND METADATA$ACTION = 'INSERT' AND METADATA$ISUPDATE = 'TRUE' THEN UPDATE SET 
                {%- for col in columns %}
                    {% if not (col.isBusinessKey or col.isSystemCreateDate)%}
                        tgt."{{ col.name }}" = src."{{ col.name }}"
                        {%- if not loop.last -%}, {%- endif %}
                    {% endif %}
                {%- endfor %}
            -- What to do with new records based on table key
            WHEN NOT MATCHED AND METADATA$ACTION = 'INSERT' AND METADATA$ISUPDATE = 'FALSE' THEN INSERT 
                (
                {%- for col in columns -%}
                    "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}) 
            VALUES (
                {%- for col in columns -%}
                    src."{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %});
        COMMIT;
        EXCEPTION
        WHEN OTHER THEN
        -- If any error occurs, rollback
        ROLLBACK;
        -- Optionally re-raise the exception to see the error details
        RAISE;
    END;
{% endif %}